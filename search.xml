<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SolarWinds Supply Chain Attack</title>
      <link href="/2021-02-25/SolarWinds-Supply-Chain-Attack/"/>
      <url>/2021-02-25/SolarWinds-Supply-Chain-Attack/</url>
      
        <content type="html"><![CDATA[<h1 id="SolarWinds-供应链攻击"><a href="#SolarWinds-供应链攻击" class="headerlink" title="SolarWinds 供应链攻击"></a>SolarWinds 供应链攻击</h1><a id="more"></a><p><img alt="SOLARWINDS " data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/SOLARWINDS%20.png"></p><p> <strong><em>SolarWinds 供应链攻击事件影响很大，以下是归纳整理的一些优秀的文章和资料，汇总自网络，已标注作者及原文链接。</em></strong></p><h2 id="FireEye-红队武器库被盗"><a href="#FireEye-红队武器库被盗" class="headerlink" title="FireEye 红队武器库被盗"></a>FireEye 红队武器库被盗</h2><p><img alt="image-20210128161257974" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/image-20210128161257974.png"></p><p><strong><em>关于 FireEye</em></strong></p><blockquote><p>火眼（FireEye）是一家公开上市的美国网络安全公司，提供用于应对高级网络威胁的自动威胁取证、及动态恶意软件防护服务，如高级持续性威胁（APT）和鱼叉式网络钓鱼（Spear phishing）。</p><p>FireEye成立于2004年，公司总部位于加利福尼亚州米尔皮塔斯。FireEye是第一家由美国国土安全部颁发认证的网络安全公司。</p></blockquote><p>FireEye于2004年在美国成立，随着APT越发猖獗，逐步走进大众视野。</p><p>作为全球领先的网络安全厂商，就像2014年Gartner分析师所评价的“FireEye Inc. is at the top of the list.”，知名度、市场份额、公司体量、美国政府支持，这些让Fireeye在网络安全领域有了更多的发言权。作为由最早提出 APT-1 报告的安全厂商，FireEye多次通过报告的形式，针对地区网络发展、国家网络战略、新型APT组织等发声。</p><p>2020.12.08，<strong>FireEye透露其系统被所谓的 “拥有一流进攻能力的国家” 入侵。</strong>该公司表示，黑客利用“新颖技术”窃取了渗透测试工具包，而这可能会在全球范围内引发新的攻击。”</p><p>目前，FireEye已经通知了执法部门，联邦调查局对此黑客事件展开了调查。尽管此次攻击并未归因于特定的组织，但参与调查的联邦调查局特工认为这是由国家资助的高度复杂的攻击者行为，并且将怀疑目标锁定俄罗斯资助的黑客。</p><p>通过攻击细节的披露，可以发现攻击者热衷于收集 FireEye 使用的Red Team工具（根据公司在野外攻击中发现的恶意软件开发的自定义工具，用于客户网络的测试），而<strong>被盗工具的范围从用于自动化侦察的简单脚本到类似于CobaltStrike和Metasploit等公开可用技术的整个框架</strong>。此外，攻击者还搜索了与FireEye某些政府客户有关的信息。</p><p>由于担忧攻击者利用这些窃取的自定义渗透测试工具对其他目标发起攻击，FireEye现在<a href="https://github.com/fireeye/red_team_tool_countermeasures" target="_blank" rel="noopener">在其GitHub帐户上共享IOC和应对措施</a>，帮助其他公司检测黑客是否使用了FireEye的任何被盗工具来破坏其网络。</p><p><strong><em>概念—IOC :Indicator of Compromise，失陷指标、威胁指标、入侵指标，MANDIANT 在长期的数字取证实践中定义的可以反映主机或网络行为的技术指示器，IOC以XML文档类型描述捕获多种威胁的事件响应信息，包括病毒文件的属性、注册表改变的特征、虚拟内存等，是一种入侵后可以取证的指标，可以识别一台主机或整个网络。</em></strong></p><h2 id="FIREEYE-发布威胁研究报告"><a href="#FIREEYE-发布威胁研究报告" class="headerlink" title="FIREEYE 发布威胁研究报告"></a>FIREEYE 发布威胁研究报告</h2><p>2020.12.13</p><ul><li>我们发现了一个全球入侵运动。我们正在跟踪该活动背后的行动者，即“UNC2452”。</li><li>FireEye发现了一个供应链攻击，该攻击将SolarWinds Orion商业软件更新木马化，以便分发我们称为“SUNBURST”的恶意软件。 </li></ul><p>SolarWinds.Orion.Core.BusinessLayer.dll是Orion软件框架的“SolarWinds”数字签名组件，其中包含一个后门，该后门通过HTTP与第三方服务器进行通信。我们正在跟踪此 SolarWinds Orion 插件的木马版本，即 SUNBURST。</p><p>攻击者通过修改文件SolarWinds.Orion.Core.BusinessLayer.dll，并且给文件打上了Solarwinds Worldwide，LLC的数字签名，以此来绕过检测。该dll会被Orion平台通过 SolarWind.BusinessLayerHost.exe或SolarWinds.BusinessLayerHostx64.exe来进行加载（取决于系统配置）。</p><img alt="640" style="zoom:50%;" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/640.png"><p>在长达两周的休眠期后，该恶意软件将尝试解析 avsvmcloud. com 的子域。DNS响应将返回指向命令和控制（C2）域的CNAME记录。到恶意域的C2流量旨在模拟正常的 SolarWinds API 通信。已知恶意基础结构的列表可在FireEye的<a href="https://github.com/fireeye/sunburst_countermeasures" target="_blank" rel="noopener">GitHub页面上找到</a>。</p><p><strong><em>概念—C2 :Command and Control 攻击者经常使用C2来保留与目标网络内受感染系统的通信，然后，他们向受损系统发出命令和控制（简单到定时信标，或涉及远程控制或数据挖掘）。通常是由被入侵的系统/主机发起从网络内部到公共互联网上的命令和控制服务器的通信。建立命令和控制链接通常是恶意软件的主要目标。</em></strong></p><p>二、跨越多个行业的全球受害者</p><p>FireEye已在全球多个实体中检测到此活动。受害者包括北美，欧洲，亚洲和中东的政府，咨询，技术，电信和采掘实体。我们预计在其他国家和地区也将有更多的受害者。FireEye已通知所有已知受影响的实体。</p><p>三、入侵后的活动和检测机会</p><p>我们目前正在跟踪软件供应链危害和相关的UNC2452入侵后活动。获得初始访问权限后，该小组在侧向移动时会使用各种技术来掩饰其操作。该参与者更喜欢保持较小的恶意软件覆盖范围，而更喜欢使用合法的凭据和远程访问来访问受害者的环境。</p><p>攻击的目标包括但不限于全球范围内的“公共和私立机构”，且<strong>自 2020 年 3 月起</strong>就已经正式开始，一直持续至今。还有调查显示，几个受害者的系统中发现的恶意 SolarWinds Orion 软件版本<strong>可追溯到 2019 年 10 月</strong>，但至今没有发现这些系统感染恶意软件之后发生过进一步攻击的迹象。因此，调查人员人员认为当时的操作可能是正式攻击的预演。</p><p><img alt="641" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/641.png"></p><p><img alt="642" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/642.png"></p><h2 id="攻击过程"><a href="#攻击过程" class="headerlink" title="攻击过程"></a>攻击过程</h2><p>攻击者在入侵SolarWinds后，将其官网提供的Orion软件安装包替换成植入后门的版本，从而实现供应链预制攻击。SolarWinds.Orion.Core.BusinessLayer.dll组件被攻击者篡改，增添了名为“SolarWinds.Orion.Core.BusinessLayer”的包含恶意代码的类函数，相关函数名称命名经过社工伪装，难于肉眼观察识别。</p><p><img alt="1607996235_5fd8134bec114775ef94b" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/1607996235_5fd8134bec114775ef94b.png"></p><p>遭篡改的SolarWinds.Orion.Core.BusinessLayer.dll组件拥有“Solarwinds Worldwide，LLC”的合法数字签名，这说明恶意代码的植入点在文件数字签名环节之前，有可能是在源码开发阶段环境、编译环境和待签名的二进制发布环节。在进入系统的12到14天后，当被Orion平台的SolarWinds.BusinessLayerHost.exe或SolarWinds.BusinessLayerHostx64.exe模块加载时，后续恶意代码会得到运行。</p><p>最终植入机器的是攻击者编写的 SUNBURST 后门，该后门基于域名 avsvmcloud.com 按子域名生成算法（DGA）发出DNS请求，C2通讯通过 HTTP 协议且伪装成Orion软件的日常改进计划流量（Orion Improvement Program，OIP），最终从 C2 回应的XML数据中读取隐写的命令和载荷并执行，后门具备的基本能力如下：</p><p><img alt="1607996306_5fd813928ad5417014f04" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/1607996306_5fd813928ad5417014f04.png"></p><p>根据FireEye发布的报告，通过植入的恶意代码获取桥头堡后，攻击者会在沦陷网络中展开横向移动，访问更多机器获取SAML（安全性断言标记语言）令牌以窃取Azure AD的文件、建立持久化等操作，或通过 TEARDROP 组件在内存中植入Cobalt Strike 木马。</p><blockquote><p><strong>作者：深信服千里目安全实验室<br>原文链接：<a href="https://mp.weixin.qq.com/s/CR6Iy3nTejR9Tfm4QCJxNw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/CR6Iy3nTejR9Tfm4QCJxNw</a></strong></p></blockquote><h2 id="Volexity-关于-SolarWinds-供应链攻击事件分析"><a href="#Volexity-关于-SolarWinds-供应链攻击事件分析" class="headerlink" title="Volexity 关于 SolarWinds 供应链攻击事件分析"></a>Volexity 关于 SolarWinds 供应链攻击事件分析</h2><p>1月7号，美国网络安全与基础设施安全局（CISA）更新了其对 SolarWinds 供应链攻击事件的调查报告《Advanced Persistent Threat Compromise of Government Agencies, Critical Infrastructure, and Private Sector Organizations》。报告指出，攻击者在对SolarWinds 植入 SUNBURST 后门之前，使用了密码猜测和密码喷洒技术攻陷了其云基础设施。</p><p>Volexity 公司透漏了 SolarWinds 公司 Outlook Web App (OWA) 邮件系统的多因素认证（MFA）被绕过、Exchange服务器被漏洞（CVE-2020-0688）攻陷、特定邮件被窃取的技术细节。因为具有相同的 TTP，所以认为与此次供应链攻击是同一组织所为。</p><h3 id="密码猜测与密码喷洒"><a href="#密码猜测与密码喷洒" class="headerlink" title="密码猜测与密码喷洒"></a>密码猜测与密码喷洒</h3><p>密码猜测（password guessing）是一种常见的攻击方式，就是对一个账户的用户名不断地尝试不同的密码，直到猜测成功。攻击者通常会选择系统默认密码、常用弱口令、或者根据目标相关信息生成的密码字典进行密码爆破攻击。密码喷洒（password spraying）又称反向密码猜测，他的攻击方式和传统的密码猜测正好相反，密码喷洒是使用同一个密码去猜测不同的用户名，看看是哪个用户使用了这个密码。密码猜测是用户名固定，优先遍历密码；密码喷洒是密码固定，优先爆破用户名。密码喷洒对使用密码错误锁定用户机制的系统更加有效。</p><h3 id="OWA-Duo-MFA-绕过"><a href="#OWA-Duo-MFA-绕过" class="headerlink" title="OWA Duo MFA 绕过"></a>OWA Duo MFA 绕过</h3><p>Volexity的调查给出了攻击者绕过Duo MFA保护的OWA服务器的一些技术细节。</p><p>从Exchange 服务器的日志来看，攻击者使用了用户名和密码进行登录，但是没有输入Duo的第二认证因子。从Duo服务器的日志来看，也没有发起需要使用Duo进行二次认证的请求。Volexity 公司通过OWA服务器导出的内存，可以确定用户的会话并没被劫持，但是攻击者直接使用了合法的Duo MFA的Cookie参数 duo-sid。</p><p>这是怎么做到的呢？</p><p>首先，攻击者在OWA服务器中获得了Duo集成身份认证的秘钥（akey）。然后，攻击者利用这个秘钥构造了一个计算好的Cookie参数duo-sid。最后，攻击者使用用户名和密码进行登录，使用duo-sid来认证Duo MFA的检查，从而实现了最终的成功登录。</p><p>攻击者利用的就是MFA本身的机制，并不是一个漏洞，所以没有触发任何安全防护机制。</p><p>在一次攻击期间，Volexity研究人员注意到黑客使用了一种新颖的技术绕过了Duo提供的多因素身份验证保护（MFA）。在受感染的网络上获得管理员特权后，黑客利用这些特权账户从运行Outlook Web App（各种网络服务提供帐户身份验证）的服务器上窃取了名为akey的Duo机密信息。然后，黑客使用akey预先生成cookie，用来绕过目标账户的MFA验证。</p><p>Securonix Threat Research的最新调研从另一个方面说明了为什么SolarWinds Orion产品中的后门很长时间没有被发现的原因。</p><p>在SolarWinds的公告中，建议用户进行以下操作：</p><p><img alt="1611024707000-image-20210112164541208" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/1611024707000-image-20210112164541208.png"></p><p>SUNBURST 后门是被SolarWinds文件夹下的Orion文件夹下的 SolarWinds.BusinessLayerHost.exe 进程加载并执行，但因为SolarWinds Orion产品本身就是监控类软件，为了自身更好地运行，官方建议加入 AV/EDR 的白名单中。攻击者正是利用这一点来大大降低被安全软件检测出来的可能性，再加上 SUNBURST 后门运行时对运行环境的严格检查，只靠 AV/EDR 的查杀几乎没有可能检测出来。</p><h3 id="权限提升与权限维持阶段"><a href="#权限提升与权限维持阶段" class="headerlink" title="权限提升与权限维持阶段"></a>权限提升与权限维持阶段</h3><p>在权限提升与权限维持阶段，CISA发现攻击添加了额外的认证凭据（authentication credentials）,包括Azure和Microsoft 365 (M365) 的令牌和证书。认证令牌应该是在AD FS环境下滥用Security Assertion Markup Language (SAML)生成的。微软在其Azure检测工具Azure-Sentinel中添加了相应的检测脚本，详情见文末参考链接。</p><h4 id="Golden-SAML"><a href="#Golden-SAML" class="headerlink" title="Golden SAML"></a>Golden SAML</h4><p>攻击者使用的技术通常被称为 Golden SAML 。</p><p>一个正常的 SAML 认证过程如下图：</p><p><img alt="bb66057e-ce7e-47bb-9ca1-71006d7e6e7d" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/bb66057e-ce7e-47bb-9ca1-71006d7e6e7d.png"></p><ol><li>用户访问特定服务，比如 AWS, Office 365。</li><li>服务重定向到 ADFS 进行认证。</li><li>用户使用域策略认证。</li><li>ADFS 向用户返回签名的 SAML 令牌。</li><li>用户使用签名的SAML令牌去访问特定服务。</li></ol><p>Golden SAML的攻击流程如下：</p><p><img alt="5f01abd5-1d69-4fa0-b1f5-aa3ad20d18a3" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/5f01abd5-1d69-4fa0-b1f5-aa3ad20d18a3.png"></p><ol><li>攻击者访问ADFS 服务器，并导出其中私钥和证书。</li><li>攻击者访问特定服务，比如AWS, Office 365。</li><li>服务重定向到ADFS进行认证。</li><li>攻击者直接通过获取的私钥生成签名的SAML令牌，省去ADFS的认证过程。</li><li>攻击者使用签名的SAML令牌去访问特定服务。</li></ol><p>针对 ADFS 的 Golden SAML 攻击和针对 ADDS 的 Golden Ticket 攻击流程和目的都很类似，目的就是构造高权限的凭据，绕过一些访问限制，达到权限维持的目的。</p><h3 id="solarleaks-公开售卖数据"><a href="#solarleaks-公开售卖数据" class="headerlink" title="solarleaks 公开售卖数据"></a>solarleaks 公开售卖数据</h3><p>1月13日，自称SolarWinds供应链攻击的组织，注册了个网站公开售卖他们获取到的数据。其中包括微软的部分源代码、SolarWinds产品源代码、Cisco产品源代码和FireEye红队工具。</p><p>网址：<a href="http://solarleaks.net/" target="_blank" rel="noopener">http://solarleaks.net/</a></p><p>查看solarleaks.net的DNS数据，可以发现域名解析由NJALLA注册，这也是俄罗斯黑客组织Fancy Bear和Cozy Bear之前使用的注册商。其中SQA记录更是表明让人无处可查之意 You Can Get No Info。</p><p><img alt="1611024707000-image-20210115150558773" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/1611024707000-image-20210115150558773.png"></p><blockquote><p><strong>转自：41yf1sh 嘶吼专业版</strong></p><p><strong>原链接：<a href="https://mp.weixin.qq.com/s/AuJGREVZUPQI6kbtbPd1GQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/AuJGREVZUPQI6kbtbPd1GQ</a></strong></p></blockquote><h2 id="微软发布-SolarWinds-入侵事件深度调查报告"><a href="#微软发布-SolarWinds-入侵事件深度调查报告" class="headerlink" title="微软发布 SolarWinds 入侵事件深度调查报告"></a>微软发布 SolarWinds 入侵事件深度调查报告</h2><p>自发现Solorigate恶意软件以来已经有一个多月的时间，我们仍在持续调查以发掘新的细节。事实证明，这是近十年以来最复杂和最持久的入侵攻击之一。我们对威胁数据的持续分析表明，Solorigate背后是非常熟练的攻击团伙，他们精心策划并组织了攻击，在保证持久性的同时仍然非常难以琢磨。这些攻击者似乎非常了解安全运营的相关知识，在执行恶意活动的同时尽可能少地留下线索。在这篇文章中，我们将分享针对该恶意活动的最新信息，让大家深入了解攻击过程。我们希望帮助防御者持续提高能力，发现攻击者最早期的活动痕迹并保护其网络免受威胁。</p><p>我们已经发布过对Solorigate后门恶意软件（Fireeye也将其称为SUNBURST）的深入分析，Solorigate后门恶意软件是SolarWinds产品的一部分，受感染的DLL已经在网络上部署，作为SolarWinds产品的一部分，允许攻击者获得对受影响设备的后门访问权限。我们还详细介绍了攻击者在受感染终端上使用的模拟键盘输入的技术，其第二阶段Payload非常强大，是一种定制化的Cobalt Strike Loader，被FireEye命名为TEARDROP，被Symantec命名为Raindrop的变种。</p><p>在复杂的Solorigate攻击链中，现在还缺少的一环是如何从Solorigate DLL后门转到Cobalt Strike Loader。我们的调查表明，攻击者尽全力确保将这两个组件尽可能地分开，以逃避检测。这篇文章重点关注这一过程，基于有限的线索展开了详细的分析。为了深入发掘这一过程，我们使用了Microsoft 365 Defender强大的跨域光学系统（Cross-Domain Optics），以一个完整全面的视角绘制出了整条攻击链。</p><p>我们还将分享针对攻击者在最初的侦查、数据收集和渗出的过程中所使用的其他技术的深入研究，这些研究成果可以进一步补充此前相关分析文章（例如FireEye和Volexity）中披露的TTP。</p><h3 id="缺失的环节：从Solorigate后门到Cobalt-Strike植入工具"><a href="#缺失的环节：从Solorigate后门到Cobalt-Strike植入工具" class="headerlink" title="缺失的环节：从Solorigate后门到Cobalt Strike植入工具"></a>缺失的环节：从Solorigate后门到Cobalt Strike植入工具</h3><p>根据SolarWinds在最近的文章中披露的攻击时间表，具有完整功能的Solorigate DLL后门在2020年2月底编译，并在3月下旬期间分发到系统。这篇文章还说，攻击者于2020年6月从SolarWinds的编译环境中删除了Solorigate后门代码。</p><p>考虑到上述时间表，以及Solorigate后门被设计为保持休眠至少两周以上的事实，我们推断攻击者花费了一个月左右的时间去选择受害者，并准备特制的Cobalt Strike植入工具和命令与控制（C2）基础架构。这也就意味着，真正的模拟键盘操作很可能在2020年5月就已经开始了。</p><p>而之所以攻击者在6月从SolarWinds二进制文件中删除了后门生成功能和被篡改的代码，可能是因为在那时他们已经得到了足够数量的有效目标，他们的目标已经从第一阶段（部署并激活后门，以便在指定的受害者网络上运行）转移到了第二阶段（继续使用Cobalt Strike植入工具模拟键盘操作以进行攻击）。</p><p>Solorigate攻击时间表：</p><p><img alt="时间线图显示了Solorigate攻击的发展" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/Fig1-Timeline-of-Solorigate-attacks.png"></p><p>但是，攻击者是如何从Solorigate后门（SUNBURST）转到Cobalt Strike Loader（TEARDROP/Raindrop）的呢？在此过程中触发了什么代码？防御者应该寻找哪些指标？</p><p>Solorigate攻击的第一阶段和第二阶段之间的过渡：</p><p><img alt="img" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/Fig2-Solorigate-attack-chain.png"></p><p>像Solorigate的幕后黑手这样成熟的攻击团伙，其目标是持续扩散和保持隐蔽，这样就能够最大限度地延长被发现的时间，收集到更多有价值的信息。对于组织而言，最重要的是能够查看整个环境中的取证数据，以了解攻击者在网络中跨越的距离，以及在网络中停留的时间，从而确认是否已经针对所发生的攻击作出了适当的补救和应对。最好的方式是使用扩展的检测与响应（XDR）解决方案，该解决方案可以帮助组织回放过去发生的事件，以寻找可能揭示网络上有攻击者存在的活动。如果不使用XDR解决方案（例如Microsoft 365 Defender），遭遇攻击的组织可能很难进行应急响应。</p><p>根据我们对Microsoft 365 Defender数据的分析，我们发现了一些线索，进一步证明了攻击者的高水平攻击过程，以及为了防止被发现所做出的努力。为了更好地说明这一点，下图展示了突破口维度的攻击链。</p><p>从Solorigate后门到Cobalt Strike的过渡：</p><p><img alt="img" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/Fig3-Transition-from-Solorigate-to-Cobal-Strike.png"></p><p>我们花费了很长的时间来研究Microsoft Defender的遥测数据以及来自运行后门版本SolarWinds DLL计算机的数据。这些主机中的绝大多数都会与最初随机生成的DNS域名.avsvmcloud.com进行通信，但并不活跃（Step #1）。但是，在5月和6月，我们看到在一少部分案例中，最初的DNS网络通信是紧跟在与其他合法域名的443端口（HTTPS）进行通信的网络活动（Step #7）之后的。于是我们针对这几台主机进行了深入调查。</p><p>我们知道，Solarigate后门仅会根据某些特定的配置文件进行激活，并且一旦激活，执行的进程（通常是SolarWinds.BusinessLayerHost.exe）会在磁盘上创建两个文件（Step #2）：</p><p>（1）一个VBScript文件，通常以现有的服务或文件夹来命名，以此混淆在计算机的合法活动之中；</p><p>（2）第二阶段DLL植入程序，即自定义的Cobalt Strike 加载程序，通常在每台计算机上进行单独地编译，并写入到%WinDir%中，与合法的子文件夹（例如C:\Windows）进行混淆。</p><p>此时，攻击者已经准备好激活Cobalt Strike植入工具。但是，攻击者显然认为一个强大的SolarWinds后门价值不菲，所以他们尽可能将Cobalt Strike Loader的运行与SolarWinds进程分开。他们希望，即使用户检测到了Cobalt Strike植入工具并清除，被篡改的SolarWinds二进制文件和供应链攻击活动也不会暴露。</p><p>攻击者通过让SolarWinds进程为进程dllhost.exe创建映像执行文件选项（IFEO）调试器注册表值（Step #3）来实现这一目标。这是一个用于持久化的MITRE ATT&amp;CK已知技术，但在启动特定进程时也有可能被滥用，以触发恶意代码的执行。在创建注册表值之后，攻击者只需等待偶发的dllhost.exe执行，这个过程会在系统上自然发生。一旦执行，就会触发wscript.exe中的进程启动，该进程的wscript.exe被配置为运行在Step #4投放的VBScript文件。</p><p>VBScript依次运行rundll32.exe，随后使用一个干净的父子进程树（与SolarWinds进程完全无关）激活Cobalt Strike DLL（Step #5）。最后，VBScript删除先前创建的IFEO值，以清除执行的任何痕迹（Step #6），并删除与HTTP代理相关的下述注册表项：</p><ul><li><em>HKEY_CURRENT_USER \ .DEFAULT \ Software \ Microsoft \ Windows \ CurrentVersion \ Internet设置\ AutoDetect</em></li><li><em>HKEY_CURRENT_USER \ .DEFAULT \ Software \ Microsoft \ Windows \ CurrentVersion \ Internet设置\ AutoConfigURL</em></li></ul><h3 id="分析定制的Cobalt-Strike-Loader"><a href="#分析定制的Cobalt-Strike-Loader" class="headerlink" title="分析定制的Cobalt Strike Loader"></a>分析定制的Cobalt Strike Loader</h3><p>在我们的调查中，我们发现了一些第二阶段的恶意软件，包括TEARDROP、Raindrop和Cobalt Strike Beacon的其他自定义加载程序。在横向移动阶段，自定义加载工具DLL大多会投放在现有Windows主目录中。以下是一些示例路径（在这篇文章末尾列出了其他路径）：</p><ul><li><em>C：\ Windows \ ELAMBKUP \ WdBoot.dll</em></li><li><em>C：\ Windows \ Registration \ crmlog.dll</em></li><li><em>C：\ Windows \ SKB \ LangModel.dll</em></li><li><em>C：\ Windows \ AppPatch \ AcWin.dll</em></li><li><em>C：\ Windows \ PrintDialog \ appxsig.dll</em></li><li><em>C：\ Windows \ Microsoft.NET \ Framework64 \ sbscmp30.dll</em></li><li><em>C：\ Windows \ Panther \ MainQueueOnline.dll</em></li><li><em>C：\ Windows \ assembly \ GAC_64 \ MSBuild \ 3.5.0.0__b03f5f7f11d50a3a \ msbuild.dll</em></li><li><em>C：\ Windows \ LiveKernelReports \ KerRep.dll</em></li></ul><p>这些文件的名称类似于合法的Windows文件和目录名称，再次证明了攻击者是如何试图融入环境并掩人耳目：</p><table><thead><tr><th><strong>合法的Windows文件/目录</strong></th><th><strong>恶意自定义加载程序</strong></th></tr></thead><tbody><tr><td><em>C：\ Windows \ ELAMBKUP \ WdBoot.sys</em></td><td><em>C：\ Windows \ ELAMBKUP \ WdBoot.dll</em></td></tr><tr><td><em>C：\ Windows \ Registration \ CRMLog</em></td><td><em>C：\ Windows \ Registration \ crmlog.dll</em></td></tr><tr><td><em>C：\ Windows \ SKB \ LanguageModels</em></td><td><em>C：\ Windows \ SKB \ LangModel.dll</em></td></tr><tr><td><em>C：\ Windows \ AppPatch \ AcRes.dll</em></td><td><em>C：\ Windows \ AppPatch \ AcWin.dll</em></td></tr><tr><td><em>C：\ Windows \ PrintDialog \ appxsignature.p7x</em></td><td><em>C：\ Windows \ PrintDialog \ appxsig.dll</em></td></tr><tr><td><em>C：\ Windows \ Microsoft.NET \ Framework64 \ sbscmp10.dll</em></td><td><em>C：\ Windows \ Microsoft.NET \ Framework64 \ sbscmp30.dll</em></td></tr><tr><td><em>C：\ Windows \ Panther \ MainQueueOnline0.que</em></td><td><em>C：\ Windows \ Panther \ MainQueueOnline.dll</em></td></tr><tr><td><em>C：\ Windows \ assembly \ GAC_64 \ MSBuild \ 3.5.0.0__b03f5f7f11d50a3a \ MSBuild.exe</em></td><td><em>C：\ Windows \ assembly \ GAC_64 \ MSBuild \ 3.5.0.0__b03f5f7f11d50a3a \ msbuild.dll</em></td></tr></tbody></table><p>在对Solorigate进行调查期间观察到的TEARDROP、Raindrop和其他定制的Cobalt Strike Beacon Loader很可能都是使用定制的Artifact Kit模板生成的。每个自定义加载工具都可能加载Beacon反射加载工具，或者先初始加载工具，随后再加载Beacon反射加载工具。反射式DLL加载是一种无需使用Windows Loader即可将DLL加载到进程内存的技术。</p><p>在Solorigate攻击中观察到的Cobalt Strike Beacon Loader的两种结构不同的变种：<img alt="img" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/Fig4-Custom-loaders.png"></p><p>在接下来的章节中，我们将讨论在Solorigate的分析过程中发现的Cobalt Strike Beacon变种。</p><h3 id="Cobalt-Strike-Beacon变种分析"><a href="#Cobalt-Strike-Beacon变种分析" class="headerlink" title="Cobalt Strike Beacon变种分析"></a>Cobalt Strike Beacon变种分析</h3><h4 id="变种1：TEARDROP"><a href="#变种1：TEARDROP" class="headerlink" title="变种1：TEARDROP"></a>变种1：TEARDROP</h4><p>迄今为止，我们已经分析了两个版本的第二阶段定制化Cobalt Strike Beacon Loader，被称为TEARDROP（Microsoft检测为Trojan:Win64/Solorigate.SA!dha）：</p><p>（1）一个包含ServiceMain函数（通常命名为NetSetupServiceMain）的服务DLL，由exe加载；</p><p>（2）一个标准非服务DLL，由exe加载。</p><p>不论加载方式如何，这两个版本均包含恶意代码触发器的导出函数。恶意代码在导出函数创建的新线程中执行。执行后，恶意代码会尝试打开扩展名为.jpg的文件（例如：festive_computer.jpg、upbeat_anxiety.jpg、gracious_truth.jpg和confident_promotion.jpg）。我们需要进一步分析，以确定每个样本引用的.jpg文件的目的和作用。该代码还会检查Windows注册表项SOFTWARE\Microsoft\CTF是否存在，一旦发现其存在或者可访问就会终止。接下来，代码继续进行解码，然后执行嵌入式自定义初始加载工具。</p><p>变种1自定义加载工具的结构：<img alt="img" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/Fig5-Structure-variant-1-Custom-loaders.png"></p><p>这个自定义加载工具的变种所使用的初始加载工具通常是使用Cobalt Strike Artifact Kit模板生成的（例如bypass-pipe.c）。</p><p>从Artifact Kit的bypass-pipe.c模板编译的初始加载工具中反编译的函数：</p><p><img alt="img" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/Fig6-diassembled-function.png"></p><p>我们分析其真实形态，发现定制化Artifact Kit生成的初始加载工具是一个DLL，已经像Shellcode那样进行了转换和加载。初始加载工具负责加载下一阶段的组件，即Beacon反射式加载工具/DLL（Cobalt Strike Beacon被编译为反射式DLL）。反射式加载工具最终在内存中初始化并执行Beacon。</p><h4 id="变种2：其他自定义加载工具"><a href="#变种2：其他自定义加载工具" class="headerlink" title="变种2：其他自定义加载工具"></a>变种2：其他自定义加载工具</h4><p>在我们的调查中，我们发现了一些额外的针对Cobalt Strike Beacon的定制化加载工具，这些加载工具似乎是使用定制化Cobalt Strike Artifact Kit模板生成的。与TEARDROP（通过导出函数触发恶意代码）不同，这些变种中的恶意代码是直接从DLL的入口点触发的，DLL的入口点会创建一个新的线程以执行恶意代码。</p><p>这些变种2自定义Loader中还包含攻击者引入的导出（使用不同名称），其作用仅仅是每分钟调用Sleep()函数。</p><p>变种2加载工具的定制化导出函数示例：</p><p><img alt="img" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/Fig7-example-custom-export-function.png"></p><p>此外，与TEARDROP不同，这些变种不包含自定义的预加载工具，这意味着加载工具DLL会进行模糊处理，并随后在内存中执行Cobalt Strike反射式DLL。</p><p>变种2自定义加载工具的结构：</p><p><img alt="img" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/Fig8-structure-custom-loader.png"></p><ul><li><p>这些自定义加载工具可以进一步分为两种类型：</p><p>（1）类型A：一组较大的DLL，可以从DLL的DATA段解码并加载Cobalt Strike 反射式加载工具（Microsoft检测为Trojan:Win64/Solorigate.SC!dha）；</p><p>（2）类型B：一组较小的DLL，从DLL的CODE段解混淆并加载反射式加载工具（Symantec命名为Raindrop，Microsoft检测为Trojan:Win64/Solorigate.SB!dha）。</p><p>定制化加载工具的两个子类型：</p></li></ul><p><img alt="img" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/Fig9-structure-custom-loader-type1-type2.png"></p><p>类型A和类型B加载工具的最终目标是解混淆，并在内存中加载Cobalt Strike反射式加载工具。类型A使用简单的rolling XOR方法进行解码，而类型B加载工具（Raindrop）则使用了AES-256加密算法（每个样本都使用唯一密钥）、LZMA压缩和单字节XOR解码例程对内存中嵌入的反射式加载工具进行混淆处理。在去混淆结束后，这两个变种都会将反射式加载工具加载到内存中，然后在内存中执行Cobalt Strike Beacon。</p><p>分析Solorigate Cobalt Strike加载工具</p><p>通过分析自定义加载工具的元数据和时间线，并对每个Beacon Payload中提取的配置数据进行分析，我们得到以下发现：</p><p>（1）自定义加载工具DLL在UTC 8:00 AM至5:00 PM之间被引入受感染的系统。在一次入侵中，BusinessLayerHost.exe在10:00 AM左右将第二阶段自定义加载工具（TEARDROP）引入环境。</p><p>（2）磁盘上的自定义加载工具DLL的编译时间戳为2020年7月至2020年10月，而嵌入的反射式DLL的编译时间戳为2016年3月至2017年11月。之所以看到2016-2017年的编译时间戳，可能是由于攻击者使用了包含编译时间戳值（compile_time）的自定义Malleable C2配置文件。最开始我们觉得攻击者似乎没有为自定义加载工具DLL的编译时间打上时间戳，但通过对受感染系统的调查分析biasing，在某些案例中，自定义加载工具DLL引入系统的时间戳早于自定义加载工具的时间戳（即DLL似乎在未来的某个时间进行了编译）。</p><p>（3）变种1和变种2自定义加载工具DLL都配置有PE版本信息，这些版本信息将自身伪装成Windows（例如DLL）、7-Zip（例如7z.dll）、Far Manager（例如Far.dll）、LibIntl（例如libintl3.dll）和其他合法应用程序。变种2的自定义加载工具主要是从合法应用程序的开源代码（例如7-Zip和Far Manager）编译而成的，也就是在这些应用程序的开源代码中添加了恶意代码。在某些场景中，自定义加载工具的样本里面还包含了一些开发过程遗留下来的痕迹。例如，从篡改后的Far Manager开源代码编译的加载工具中，我们看到了以下C++头（.hpp）的文件路径（C:\build\workspace\cobalt_cryptor_far (dev071)\farmanager\far\platform.concurrency.hpp）。</p><p>在自定义Cobalt Strike加载工具示例中观察到的C++头文件（.hpp）的文件路径：</p><p><img alt="img" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/Fig10-file-path.png"></p><p>（4）每个自定义加载工具DLL都包含一个指定的PE导出函数，该函数将触发加载工具的恶意功能（变种1）或调用Sleep()函数（变种2）。下面是这些PE导出函数的不完整列表（每个加载工具仅体现了一个）。请注意，这些导出名称中有一些包含“Tk”前缀，可以作为威胁狩猎的潜在指标。</p><table><thead><tr><th>__GetClasterInf</th><th>FreeSetupRevoke</th><th>Tk_GetRootCoords</th></tr></thead><tbody><tr><td>TkComputeAnchor</td><td>TkpSetMainMenubar</td><td>__RtlProjectObj</td></tr><tr><td>GetLimitStroke</td><td>Tk_IntersectTextLayout</td><td>TkDebugBorder</td></tr><tr><td>TkSelPropProc</td><td>__TkGlobal</td><td>NetSetupServiceMain</td></tr><tr><td>Tk_NameOf3DBorder</td><td>TkFindStateString</td><td>TkWin取消鼠标计时器</td></tr><tr><td>_XInitImageFuncPtrs</td><td>RestVirtAlloc</td><td>Tk_PostscriptImage</td></tr><tr><td>TkGetDefaultScreenName</td><td>TkWinClipboardRender</td><td>CreateLocalThread</td></tr><tr><td>SetTkPrv</td><td>Tk_QueryAllocMem</td><td>TkGrabState</td></tr><tr><td>XClearWindow</td><td>CreateProcessTVI</td><td>Tk_GetElementBox</td></tr><tr><td>Tk_SizeOfImage</td><td>TkpSetKeycodeAndState</td><td>XCreateBitmapFromData</td></tr></tbody></table><p>（5）除了攻击者在横向移动阶段将自定义加载工具放置在每个系统的唯一位置之外，我们调查期间发现的大多数Beacon和反射式加载工具样本中还配置了唯一的C2域名、唯一的水印ID、唯一的PE编译时间戳、PE原始名称、DNS Idle IP（例如：84[.]200[.]70[.]40、208[.]67[.]220[.]220、208[.]67[.]222[.]222、9[.]9[.]9[.]9和8[.]8[.]4[.]4）、唯一的User-Agent和HTTP POST/GET URI、休眠时间和噪音因子。非常值得关注的是，没有两个Beacon样本使用同一个C2域名、水印或上述配置值。除了某些内部字段外，大多数Beacon配置字段都可以通过Malleable C2 Profile机型自定义。如果攻击者确实使用了自定义的Malleable C2配置文件（如上表所示），则对于在同一网络内进行不同横向移动过程的Beacon实例，这些配置文件会存在较大的差异。如上所述，每个Beacon实例都携带唯一的水印值。通过对水印值的分析，我们发现所有水印值都以数字“3”开头，例如：</p><table><thead><tr><th>0x <em>3</em> 0343131</th><th>0x <em>3</em> 4353633</th><th>0x <em>3</em> 8303535</th><th>0x <em>3</em> 8383238</th></tr></thead><tbody><tr><td>0x <em>3</em> 2323638</td><td>0x <em>3</em> 5373331</td><td>0x <em>3</em> 8353138</td><td>0x <em>3</em> 8383430</td></tr></tbody></table><p>（6）就后漏洞利用（Post-exploitation）的工具而言，我们观测到的Beacon实例配置中使用了不同的“spawnto”值，Cobalt Strike根据这个值生成临时进程，并将后漏洞利用相关的组件或特征注入到生成的进程中。这个详细信息对于搜索exe进程创建事件可能很有价值。以下是我们观察到的Beacon实例使用的一些路径：<em>％WINDIR％\ System32 \ conhost.exe<strong>％WINDIR％\ System32 \ control.exe</strong>％WINDIR％\ System32 \ dllhost.exe<strong>％WINDIR％\ System32 \ help.exe</strong>％WINDIR％\ System32 \ LogonUI.exe<strong>％WINDIR％\ System32 \ msiexec.exe</strong>％WINDIR％\ System32 \ print.exe<strong>％WINDIR％\ SysWOW64 \ audiodg.exe</strong>％WINDIR％\ SysWOW64 \ help.exe<strong>％WINDIR％\ SysWOW64 \ msiexec.exe</strong>％WINDIR％\ SysWOW64 \ msinfo32.exe<strong>％WINDIR％\ SysWOW64 \ print.exe</strong>％WINDIR％\ SysWOW64 \ WerFault.exe</em></p><h3 id="其他攻击、反取证和隐蔽策略"><a href="#其他攻击、反取证和隐蔽策略" class="headerlink" title="其他攻击、反取证和隐蔽策略"></a>其他攻击、反取证和隐蔽策略</h3><p>如前所述，Solorigate幕后是技术实力较强的攻击团伙，他们遵循了安全运营（OpSec）的最佳实践来最大程度地减少痕迹，从而避免被发现。</p><p>在我们通过Microsoft 365 Defender丰富的遥测镜头深入分析攻击者的战术、技术和过程（TTP）的探索中，观察到了一些值得揭示的技术，可以帮助其他防御者更好地应对此事件，同时也可以使用Microsoft 365 Defender高级威胁狩猎或Azure Sentinel查询之类的工具来查找历史上是否存在恶意活动的痕迹。</p><p>我们之所以说攻击者具备专业的安全运营方法和反取证行为特征，主要基于以下原因：</p><p>（1）攻击者针对每个受感染主机都使用了单独的指标。如上一章所述，在每台机器上的每个Cobalt Strike DLL植入工具都是唯一的，并且不惜一切代价避免文件夹名称、文件名称、导出函数名称、C2域名/IP、HTTP请求、时间戳、文件元数据、配置和子进程的重复使用。对于不可执行的实体，也同样采用了这种极致的差异化方式，例如WMI持久性过滤器名称、WMI过滤器查询、用于7-Zip压缩文件的密码和输出日志文件的名称。对于每个受感染的计算机都遵循这种策略，无疑是一项异常复杂的工作，通常是其他攻击者无法做到的。这样一来，攻击者就可以有效地防止网络中受感染的资产之间或不同受害者之间共享威胁情报。</p><p>（2）伪装并融入环境。攻击者使用的工具和二进制文件（例如ADFIND合法工具）均会被重命名为与计算机上现有程序和文件高度相似的名称。这种混淆策略不仅应用在文件上，还应用在其他元素上。例如，创建的WMI持久性筛选器的名称和查询，与受感染组织中存在的其他脚本名称匹配。</p><p>（3）在进行频繁且持续的模拟键盘操作之前，攻击者使用AUDITPOL禁用事件日志记录，然后再重新启用。</p><p>（4）以类似的方式，在运行容易产生告警的网络遍历活动（例如频繁的NSLOOKUP或LDAP查询）之前，攻击者精心设置了特殊的防火墙规则，以最大程度减少某些协议的传出数据包。在完成网络侦查后，还有条不紊地删除了此前设置的防火墙规则。</p><p>（5）在未经准备的前提下不会进行任何横向移动。为了增加其恶意活动的隐蔽性，攻击者首先遍历了目标主机上运行的远程进程和服务，并决定仅在禁用某些安全服务后再进行横向移动。</p><p>（6）我们相信，攻击者使用Timestomping来修改组件的时间戳，并且还使用了专业的擦除工具让防御者难以从被攻击环境中查找和恢复DLL注入工具。</p><p>下面列举了一些值得关注的独特TTP。在大多数情况下，命令和工具都是通过从Cobalt Strike主要父进程启动的中间“cmd.exe /C”进程来执行的。我们正在积极与MITRE合作，以确保在ATT&amp;CK框架的后续更新中增加在此次事件中发现的新技术。</p><p><img alt="640" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/640-1614046566225.png"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>随着我们持续深入地了解Solarigate攻击，我们会更加清楚地了解到攻击者的技能水平，以及他们计划开展何种攻击行动来实施近期历史上最为复杂的攻击之一。复杂的攻击链再加上漫长的操作过程，这意味着防御解决方案需要对攻击者的活动具有全面、跨域的监测能力，同时有能力记录并提供长达数月的历史数据，使用强大的威胁狩猎工具，以便能及早开展调查。</p><p>像Solorigate这样的攻击事件，突显了组织需要使用高级安全解决方案（例如Microsoft 365 Defender和Azure Sentinel），并以“假设已经被攻陷”的前提来开展安全响应。Microsoft 365 Defender借助多个功能的实力进行跨域保护，从而尽可能提供全面的防御能力。Azure Sentinel会从包括Microsoft 365 Defender在内的多个数据源收集数据，并将数据结合在一起，以广泛寻找攻击者的活动。</p><p>在我们对2020年5月至2020年11月期间由已知Solorigate恶意活动产生的安全事件的持续取证分析中，我们看到Microsoft Defender生成了以下告警。如果检查在此时间段内是否产生了下述事件告警，或许可以将这些告警事件作为Solorigate恶意活动的一个潜在检测指标。</p><p>Microsoft Defender for Endpoint的告警：</p><p>（1）由签名的可执行文件执行的低信誉任意代码；</p><p>（2）可疑的Atosev行为被阻止；</p><p>（3）可疑的远程WMI执行；</p><p>（4）WMI事件筛选器被绑定到可疑事件使用者。</p><p>Microsoft Defender for Identity的告警：</p><p>（1）用户和IP地址侦查；</p><p>（2）可疑的Kerberos SPN暴露。</p><p>在2020年6月，Microsoft Defender针对终端上Solorigate相关的恶意活动产生的告警：</p><p><img alt="640" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/640-1614046717084.png"></p><p>Solorigate攻击活动的披露及后续调查揭示了更多细节和情报，这些情报可以让我们改进现有的检测方式并建立新的检测方式。如果希望获得有关检测与Solorigate研究的更全面信息，安全运营团队可以参考“Using Microsoft 365 Defender to protect against Solorigate”。</p><p>同时，网络管理员可以根据Solorigate和类似的复杂网络攻击进行网络加固，建议可以阅读“Increasing resilience against Solorigate and other sophisticated attacks with Microsoft Defender”。</p><p>要从Microsoft获得最新信息和指南，请访问 <a href="https://aka.ms/solorigate" target="_blank" rel="noopener">https://aka.ms/solorigate</a> 。</p><blockquote><p><strong>作者：zcgonvh &amp;&amp; rem4x    奇安信 CERT</strong> </p><p><strong>原文链接：<a href="https://mp.weixin.qq.com/s/DsFgqpQ2Gbs0j0aQaFbsYA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/DsFgqpQ2Gbs0j0aQaFbsYA</a></strong></p></blockquote><h2 id="从Solarwinds供应链攻击（金链熊）看APT行动中的隐蔽作战"><a href="#从Solarwinds供应链攻击（金链熊）看APT行动中的隐蔽作战" class="headerlink" title="从Solarwinds供应链攻击（金链熊）看APT行动中的隐蔽作战"></a>从Solarwinds供应链攻击（金链熊）看APT行动中的隐蔽作战</h2><h3 id="0x10-前言"><a href="#0x10-前言" class="headerlink" title="0x10 前言"></a>0x10 前言</h3><p>有过实战经历的红队成员都应知晓，任意行动在任意路径下，可能被捕获的任意行为，均可能造成行动暴露。站在攻击者的角度思考，这里体现了三个信息：</p><p><strong>1. 攻击者在行动前，应意识到可能导致行动暴露的信息，并制定避免方式。</strong></p><p><strong>2. 攻击者在行动时，应严格按照行动前的隐蔽条例作战，并及时处理突发情况。</strong></p><p><strong>3. 攻击者在行动后，应清理遗留信息，并封存已用资源。</strong></p><p>考虑现阶段安全环境现状，无论是基于主机或是基于网络的防御均日趋完善，完美的隐藏在现实中是不可能的。攻击者能够做到的只是尽量隐匿而不可能完全隐身，无论多么完美的手段都会留下痕迹，这也是攻击侧广为人知却又颇为无奈的事实。</p><p>这些不可避免的痕迹构成了防御侧的情报基础。利用这些情报信息，虽然事前的情形我们无从知晓，但是在事中和事后，我们捕获的攻击行为，提供了直接触碰攻击组织的窗口，其中任何有价值的信息均可以作为证据。这些证据无论在事中止损，还是事后溯源，乃至攻击反制都将起到极大作用。</p><p>基于现有的事实，结合多维度的分析与推断，最终能够描绘出较完善的攻击者画像。</p><p>本文从全局出发，以技术作为手段，以代码、手法和行为作为支撑。通过推测对方的实际行为、人员配比、后续行动，尽最大可能窥视并揭露行动背后掩藏的真相。</p><p>这不是威胁情报文章，因此我们不会花费大量的篇幅在描述常规背景、威胁影响与IOC上面，这对从更高维度观察APT威胁毫无帮助。这也不是样本分析文章，我们同样不会花费大量的篇幅描述如何逆向代码、如何使用工具或是发现了某种调用表明做了某些事等等，这些常规代码分析与猜测在针对类似组织的行动时，是极为苍白无力的。</p><p>我们希望将实际行动的思想融入到样本分析与APT追踪，同时借此文揭露的真实APT手段，为安全从业者敲响警钟：<strong>APT攻击不是单纯的安全事件，而是不见硝烟的战争。我们面对的是成组织、成建制的攻击，作为样本分析人员应当扮演侦察兵的角色，最大化提升自己的行动意识与攻击视界，同时磨练出对等作战的能力，否则必将在战斗中一败涂地。</strong></p><p>根据行业知识的积累与逻辑思维理解的不同，理解本文至少需要一天至一周的时间。</p><h3 id="0x20-代码"><a href="#0x20-代码" class="headerlink" title="0x20 代码"></a>0x20 代码</h3><hr><p>有别于样本分析，在探究一个组织真正的目的时，我们不应该过多的关心API是如何调用的、读了什么、写了什么或是用什么加密算法进行了什么变换等细枝末节。举个最简单的例子，msfvenom可以使用任意encoder进行编码，大部分encoder中都存在随机字节用于将输出随机化（例如alpha），这样的样本数量可以认为是无限的。</p><p>我们在分析时不会关心alpha编码使用了哪个随机字符作为混淆，因为这是毫无意义的。类比于此，任何攻击者都可能将具体技术进行等价替换，例如：key随机化、加密算法随机化、等效API代替等等。如果一次事件分析仅仅关心相似的细枝末节，把加密key和算法、调用的API、发送的数据包等细节输出成文。这样的文章在整体的攻击行为追溯上可以说是非常失败的。</p><p>事实上我们应当首先把自己的角度转化为攻击者角度。作为攻击者只用关心一点：样本中的代码能为行动起到何种推进？带着这个疑问再转回分析人员，对每一段代码功能进行提问：为什么对方的行动需要设计此功能？随即又转回攻击者：我拿到了这段代码的执行结果/我实现了这个操作以后，我要做什么？</p><p>有了依据事实而得出的合理推测，结合情报获取到的实质证据，我们至少在行动手段上能够为攻击者制造画像，甚至可以为后续<strong>战术</strong>甚至<strong>战略</strong>层面分析提供大量的帮助。</p><p>这才是代码层面分析的核心目的。</p><h4 id="0x21-入口选择"><a href="#0x21-入口选择" class="headerlink" title="0x21 入口选择"></a>0x21 入口选择</h4><hr><p>根据火眼的分析报告，恶意代码包含在SolarWinds.Orion.Core.BusinessLayer.dll中，恶意类名称为SolarWinds.Orion.Core.BusinessLayer.OrionImprovementBusinessLayer，其入口点是Initialize方法。</p><p>我们不要匆匆忙忙的进行分析，首先思考一个问题：此dll具有合法的签名，很显然攻击者从源码阶段进行了控制，那么最初的突破点在哪里？考虑软件工程的工作流程，攻击者最有可能发起感染的位置是代码仓库，这样能够最大限度避开commit之前的review，以及提交期间的自动化代码扫描，防止在开发阶段被发觉。</p><p>代码仓库必然会包含多套代码，那么再思考这样一个问题：为什么恶意代码会放置于此dll中，此代码谁又会进行调用？类比Web攻击中的后门驻留，恶意代码插入的位置实际上能在某种意义上决定存活时间，而对于位置的选择往往能直接反映攻击者的行动思路。</p><p>带着这个疑问查看恶意代码交叉引用，我们可以得到以下（图0）调用堆栈：</p><p><img alt="640 (1)" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/640sadwdsdaf.png"></p><p>图0</p><p>恶意代码被插入至RefreshInternal方法中，而非常规的入口方法。实际的入口方法Start作为父类BusinessLayerPlugin的重写，将在主进程SolarWinds.BusinessLayerHost.exe中被调用，中间有着很长的代码路径。</p><p>攻击者选择了一个非常深层次的调用堆栈，用来降低代码重构期间被发现的可能。同时，藏匿在C#托管类库，而非直接寄生于主程序本体，实际上也属于后续运行期间的掩护手段之一。</p><p>再关注具体实现：RefreshInternal方法中插入了以下代码（图1）。此代码用于检测是否启动，如未启动将开启新线程运行恶意代码：</p><p><img alt="64241342342323" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/64241342342323.png"></p><p>图1</p><p>检查项IsAlive进行了全局锁（图2），保证了在插件运行期间只有一个实例运行。</p><p><img alt="er4r4343ef" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/er4r4343ef.png"></p><p>图2</p><p>是的，此后门在插件生存周期内只会运行一次。</p><p>在后续分析中还将看到大量类似的行为，这是和常规攻击完全不一样的点。</p><h4 id="0x22-环境检测"><a href="#0x22-环境检测" class="headerlink" title="0x22 环境检测"></a>0x22 环境检测</h4><p>在执行后门功能前，代码将进行长达9层的判断，用于检测当前运行环境。</p><p>几乎所有的判断都是通过自定义hash算法进行的，这保证了无论是在源码，还是在编译后的程序集中，均不会存在敏感字符串，从而降低被查杀的可能，对于开发期间可能的人工检测也是一种掩护。</p><p>后门首先会检测父进程名的hash是否为17291806236368054941（图3），对应进程名SolarWinds.BusinessLayerHost.exe（国内部分翻译型安全团队的结论几乎照抄了FireEye的结论，且包含初期的笔误，欲见详情请在“搜一搜”中搜索关键字：SolarWindws.BusinessLayerHost。）。考虑到整体的谨慎性，这可以理解成防止在多进程中多次加载的双保险，也可以认为是一个基本的反调试验证。</p><p><img alt="regfesgrarg32310" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/regfesgrarg32310.png"></p><p>图3</p><p>如果检测通过，后门将读取SolarWinds.Orion.Core.BusinessLayer.dll的最后写入时间。我们考虑一套软件的安装部署流程，这几乎可以认为是后门落地时间。之后生成一个位于288-336之间的随机数作为经过的小时间隔（图4），与落地时间相加后和当前时间做对比。只有当前时间大于这个随机时间间隔才会上线。</p><p>这意味着后门的上线时间和落地时间的间隔被拉长并随机化，在落地的前12天是不会上线的，12-14天则随时间逐渐提高上线几率（图5），直到14天后才会确保上线。</p><p><img alt="sefeeeeefs34324" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/sefeeeeefs34324.png"></p><p>图4</p><p><img alt="640" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/640-1614049027631.png"></p><p>图5</p><p>在时间判断通过后，首先根据硬编码名称583da945-62af-10e8-4902-a8f205c72b2e（图6）创建命名管道（图7），用于保证多进程中的互斥行为，如失败将抛出异常并在捕获后退出线程。</p><p><img alt="6400000" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/6400000.png"></p><p>图6</p><p><img alt="6400001" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/6400001.png"></p><p>图7</p><p>随后将检查一个被恶意复用的配置选项ReportWatcherRetry。此选项本用于[SolarWinds.Orion.Core.Common]SolarWinds.Orion.Core.Common.OrionReportHelper::InitReportsWatcher方法中（图8），作为正常处理报告期间的重试次数，其默认值为4。</p><p>恶意代码将检查此项，其3、4、5的值分别对应Truncate、New、Append三种持久化状态（图9）。</p><p><img alt="6400002" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/6400002.png"></p><p>图8</p><p><img alt="6400003" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/6400003.png"></p><p>图9</p><p>默认值对应New，表明新植入。而值为3对应的Truncate状态将导致后门直接退出。</p><p>这里滥用了一个已知选项，在不影响正常功能的情况下对自身状态进行了持久化，其设计思路隐蔽巧妙，显示出了非常老练的后门功底。<strong>本次行动中攻击者多次将DNS协议本身携带的信息作为控制信道的一部分使用，这明显体现出高对抗状态下磨练出的实战技术视野，从技术和思维上已大大超过常规行动体的范畴</strong>，相关的细节将在0x23、0x24章节进行描述。</p><p>如果状态不为Truncate，则将获取当前主机的Windows Domain Name，并进行以下两项检测：</p><p>\1. 是否在patternHashes黑名单列表中。此黑名单维护了13个已知域（图10），通过简单的爆破可以得到以下结果：</p><p><img alt="6400004" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/6400004.png"></p><p>图10</p><p>注意红圈所在的三个域名，我们有理由相信swdev为SolarWinds develop的缩写，swi为SolarWinds Internal的缩写，这从侧面证明了0x21中代码仓库已被实际控制的推测。</p><p>2.域名是否包含test或solarwinds（不区分大小写），用于排除测试域或供应商内网（图11）。</p><p><img alt="6400005" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/6400005.png"></p><p>图11</p><p>域名检测通过后，首先检测网卡，根据第一个非回环启用网卡生成唯一标识符（图12），并在后续通信中进行发送。</p><p><img alt="6400006" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/6400006.png"></p><p>图12</p><p>随后进入运行环境检测阶段。阶段第一步会对137个进程Hash黑名单进行检测，此黑名单中绝大多数为常见分析工具如ProcExp、WinHex、WinDbg等。</p><p>第二步会遍历进程，计算Hash并尝试查找对应的杀软服务名称，共8组22个进程41个服务。如当前环境任一进程Hash与列表匹配，则遍历注册表HKLM\SYSTEM\CurrentControlSet\services子项，修改任何匹配的服务项权限为完全控制，并将服务状态设置为禁用（图13）。</p><p><img alt="6400007" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/6400007.png"></p><p>图13</p><p>成功设置禁用后，会使用另一个被恶意复用的配置选项ReportWatcherPostpone保存服务状态，此选项默认值为250。新状态通过位进行保存，恶意代码会在默认值的基础上与新状态求和并持久化写入（图14）。</p><p><img alt="6400008" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/6400008.png"></p><p>图14</p><p>如果未修改任何服务状态，则会执行WMI查询：Select * From Win32_SystemDriver来获取运行环境中已加载的驱动程序列表（图15），并和已知黑名单列表进行对比。此列表包含以下17项，基本为edr的过滤驱动：</p><p><img alt="6400009" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/6400009.png"></p><p>图15</p><p>如进程、服务、驱动状态检查通过，最后将解析官方域名api.solarwinds.com，如成功则转入上线逻辑（图16）。上述过程可用流程图表示如下：</p><p><img alt="6400010" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/6400010.png"></p><p>图16</p><p>根据0x21的分析，如任一检测失败，在父进程SolarWinds.BusinessLayerHost.exe不重启或插件不重新加载的情况下不会再次上线（最坏的可能需要等待系统重启）。</p><p>上述整体流程体现了在攻击者思想中<strong>隐蔽处于绝对的首位</strong>，攻击者宁可放弃大量的上线机会也不愿在某个非安全环境上线，这种谨小慎微的做法和常规情况是完全相反的。</p><h4 id="0x23-敲门上报"><a href="#0x23-敲门上报" class="headerlink" title="0x23 敲门上报"></a>0x23 敲门上报</h4><p>通过重重检测，后门将进入DNS敲门阶段。此整个生存周期内会通过一个DnsRecords对象（图17）保存敲门阶段获取的信息，并传递至控制阶段：</p><p><img alt="6400011" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/6400011.png"></p><p>图17</p><p>代码通过DNS协议中正常的名字与结构进行混淆视听，在后面我们还会看到更多写作A表示B的情形，一方面作为隐蔽措施，另一方面在一定程度上增加了分析成本，这些在常规样本中都是难以遇到的。</p><p>恶意代码在敲门的第一步采用了dns协议，通过DGA生成随机域名，其实现为状态机。根据植入状态的不同，实际上存在两种DGA算法进行计算（图18）。</p><p><img alt="6400012" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/6400012.png"></p><p>图18</p><p>当持久化状态为New时，此时恶意代码认为处于首次运行（下称一阶段）。一阶段DGA由GetPreviousString方法生成，会进行以下操作：</p><ol><li><p>编码内网DNS主域名</p><p>a)如全部由小写、数字、下划线、点组成，则执行码表变换。</p><p>b)否则，进行自定义映射表base32编码。</p></li><li><p>编码guid，并将随机key高位置位，随后进行base32编码。</p></li><li><p>编码后的主域名进行分段，并将编号通过编码后的guid的第一个字符求和进行编码。</p></li><li><p>合2、3、1三部分，作为DGA域名。</p></li></ol><p>随后，DGA域名将与四个随机的主域名进行拼接，并进行DNS查询。</p><p>由于分段的原因，此阶段可能进行多次连续请求，任一分段发送失败都将调用GetCurrentString进行重发。</p><p>返回的CNAME信息将保存至DnsRecords对象，根据查询结果，将进行以下判断：</p><p>1.如请求失败，则设置随机7-9小时的休眠时间（图19），并在下一次尝试时首先进行休眠操作。</p><p><img alt="6400013" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/6400013.png"></p><p><img alt="6400014" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/6400014.png"></p><p>图19</p><p>2.如请求成功，则首先判断是否存在CNAME信息，如不存在，则处理IP的最后两个字节，填充DnsRecords对象的以下字段：</p><p>a)length字段，此字段用于保存控制阶段应用的代理类型（图20）。</p><p><img alt="6400015" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/6400015.png"></p><p>图20</p><p>b)type字段，此字段决定控制阶段使用的url以及对返回数据的解码方式（图21）。</p><p><img alt="6400016" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/6400016.png"></p><p>图21</p><p>c)A字段，此字段决定敲门阶段每次DNS请求之间的延时（图21）。</p><p><img alt="6400017" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/6400017.png"></p><p>图21</p><p>3.无论CNAME是否存在，之后均将遍历以下名单（图22）：</p><p><img alt="6400018" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/6400018.png"></p><p>图22</p><p>注意这里的AddressFamilyEx枚举，其中使用Atm作为内网IP黑名单，ImpLink作为外网IP黑名单，Ipx作为等待名单，NetBios作为白名单。包括IPAddressesHeler类在内，这同样都是通过看似正常的代码混淆视听的行为。</p><p>如返回IP处于任一黑名单，将导致状态更改为Truncate，从而导致后续操作全部终止，当后续恶意代码执行时，由于0x22检测 阶段的判定检测失败从而永不上线（图23）。</p><p><img alt="6400019" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/6400019.png"></p><p><img alt="6400020" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/6400020.png"></p><p>图23</p><p>若处于等待名单，则将状态重置为New，退出此次活动，并等待下次调用。（图24）</p><p><img alt="6400021" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/6400021.png"></p><p>图24</p><p>若处于白名单，则循环发送被分段的域名直到结束，随后进入二阶段（图25）。</p><p><img alt="6400022" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/6400022.png"></p><p>图25</p><p>其他任何情况下，将退出此次活动，并等待下次调用。</p><p>这实质上是一个<strong>自毁/上线/休眠</strong>开关，判定的依据则是DNS协议返回的IP本身。攻击者充分利用了常规DNS协议中的数据交互，巧妙地将所需信息以寄生的方式隐写在正常协议数据内，摆脱了常规基于TXT记录接收信息返回的方式，其谨慎程度可见一斑。</p><p>当域名被完整发送后将进入阶段二，此阶段DGA由GetNextString方法生成，该方法会进行以下操作：</p><p>1.计算自2010-1-1 0:0:0开始，以半小时为单位的时间戳，取后三字节并对高4位进行混淆。</p><p>2.以时间戳为key对guid进行循环异或。</p><p>3.拼接2、1，产生高位未置位的随机key并进行编码，随后进行base32编码作为DGA。</p><p>同样的，该DGA域名将与四个随机的主域名进行拼接，并进行DNS查询，查询结果同样将进行上述黑白灰名单验证，如验证通过、包含CNAME且CNAME所指向IP被标记为ext，则敲门阶段结束，进入后续控制阶段（图26）。</p><p><img alt="6400023" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/6400023.png"></p><p>图26</p><p>综上，敲门阶段整体的流程图（图27）可总结如下：</p><p><img alt="6400024" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/6400024.png"></p><p>图27</p><p>结合流程图和代码实现可以明显看出，一阶段DGA中包含了可以完整解析的域名，二阶段DGA中至少包含了有效的服务器时间戳，两个阶段具有相同的guid且可作为关联。这些都属于攻击者在设计阶段认为有用从而刻意搜集的信息。</p><p>同时，一二阶段的CNAME存在与否、IP本身最后两字节在后续攻击中具有实际含义，这些不可能通过传统的配置NameServer进行实现。</p><p>所以我们完全有理由相信攻击者编写了一个定制化的NameServer服务，并承担了整个供应链攻击过程中的控制中枢，此服务至少应当具备以下几点能力：</p><p>1.收集被感染目标相关信息。</p><p>2.根据回传信息进行目标精准辨识。</p><p>3.根据既定作战任务进行目标筛选、研判并作出具体指令：终止、等待或是持续渗透。</p><h4 id="0x24-控制机制"><a href="#0x24-控制机制" class="headerlink" title="0x24 控制机制"></a>0x24 控制机制</h4><hr><p>相比复杂的DGA敲门，HTTP控制阶段相对简单得多。</p><p>该阶段的入口点为SolarWinds.Orion.Core.BusinessLayer.OrionImprovementBusinessLayer.HttpHelper::Initialize方法，和DGA敲门的代码结构类似，核心循环同样通过状态机实现。</p><p>HttpHelper的构造函数会处理由敲门阶段决定的请求类型与代理类型（图28）：</p><p><img alt="6400025" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/6400025.png"></p><p>图28</p><p>requestMethod字段伪装成合法的HTTP请求方法，其实际上决定了整个控制阶段的HTTP数据格式，具体为以下三点：</p><p>1.决定User-Agent（图29）：</p><p><img alt="6400026" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/6400026.png"></p><p>图29</p><p>可以看到存在两种User-Agent，在正常情况下，第一种会用于Windows检查证书吊销列表，第二种用于SolarWinds本身的通信过程。</p><p>考虑到SolarWinds本身是一个服务器软件，攻击者精心选择了正常服务器发送的User-Agent，并根据系统环境精确伪造了版本，在对抗层面上进一步提升了伪装的可信度。</p><p>2.决定Url：</p><p>无论采用了哪种User-Agent，后门最终使用的Url都将在合理范围内进行最大限度的随机化。</p><p>如果采用了第一种，则Url伪装为一个证书吊销列表文件（图30）：</p><p><img alt="6400027" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/6400027.png"></p><p>图30</p><p>否则将伪装为SolarWinds正常请求链接或静态资源（图31、32）：</p><p><img alt="6400028" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/6400028.png"></p><p>图31</p><p><img alt="6400029" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/6400029.png"></p><p>图32</p><p>Valid方法用于百分比随机，使得预测某个Url的产生是不可能的，这在一定程度上对基于统计学的恶意行为发现起到了对抗作用。</p><p>3.决定如何解析返回数据（图33）</p><p><img alt="6400030" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/6400030.png"></p><p>图33</p><p>在整个执行流程中，User-Agent、请求的Url、对应的返回格式均严格对应，显示出了极为缜密的编码思路。</p><p>而后的出网代理主要分为三类，无代理、系统代理以及SolarWinds本身配置的代理（图34）：</p><p><img alt="6400031" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/6400031.png"></p><p>图34</p><p>注意红框位置，这段代码调用了SolarWinds本身功能实现，显然攻击者对该套系统极为熟悉，同时也为控制代码仓库的假设提供了另一重佐证。</p><p>之后也不要忘记，这两个字段由DNS请求返回的IP解析而来，将IP地址本身作为控制信道的一环来决定后续行为，是本次行动一个非常显著的特征。这同时存在三个好处：</p><p><strong>1.基于域名的数据重放，很有可能无法得到有效信息甚至会得到完全错误的结果。</strong></p><p><strong>2.若对方可以通过DNS出网但无法上线，可通过修改解析的方式更换代理配置。这也为上面自定义NS服务器的假设提供了证据。</strong></p><p><strong>3.可能用于对抗在斯诺登事件中泄漏的TUTELAGE系统，该系统由NSA开发，其中CLOUDSHIELD模块使用了DNS劫持技术对未知威胁进行诱捕。据泄露信息，该系统被广泛部署在美国的国防承包商、军工企业以及情报机构，这与本次行动的受影响目标相吻合。</strong></p><p>控制过程中的HTTP请求同样经过高度伪装，根据代码还原的一个请求大致如下（图35）：</p><p><img alt="6400032" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/6400032.png"></p><p>图35</p><p>有效信息被完全打散并伪装成合法的json格式进行传输，同时传输过程中刻意仿冒了Solarwinds的真实URL，容易让专业水平较低的安全分析师误判为合法通讯。</p><p>和协议相比，具体的控制指令实现反而乏善可陈，事实上这在远控开发中也是最微不足道的细枝末节。我们查看实际实现的功能，可以很明显的看出仅有基本信息、文件管理、注册表管理、无回显命令执行、重启等基本功能（图36），不存在动态拓展、也不存在横向移动等后渗透阶段的相关能力支持。</p><p><img alt="6400033" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/6400033.png"></p><p>图36</p><p>如此简陋的控制功能和极为复杂的上线逻辑形成了相当大的反差，那么只有一种可能：此后门在实质上仅仅是一个高隐蔽性的探针，后续攻击一定会更换后渗透的攻击套件进行下一阶段的行动。</p><p>同时结合敲门阶段的自毁功能，我们甚至有理由怀疑真正进入后渗透阶段后探针将停止一切活动，该功能可由控制中枢（NameServer）下发黑名单域名直接完成，也标志着这套寄生于SolarWinds中的供应链后门生命周期的结束。</p><p>通过分析相关的DGA数据获取的信息也可以得出本次行动的供应链攻击环节由三月份开始并在七月份达到顶峰，随后成逐渐下降的趋势并于十月份消失在视野之中，详见0x41章节。</p><h4 id="0x25-行动架构"><a href="#0x25-行动架构" class="headerlink" title="0x25 行动架构"></a>0x25 行动架构</h4><hr><p>结合上述已知行为，我们可以大致勾勒出该后门探针的执行流程（图37）。这个流程的核心体现在了上线阶段的高强度运行环境检测、高度定制化的NameServer作为控制中枢以及寄生于DNS协议的控制信道：</p><p><img alt="6400034" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/6400034.png"></p><p>图37</p><p>将这样复杂的定制化后门作为一次性探针使用，这样高的开发成本和攻击成本对小团队来说是不现实的。</p><p>实际上能够设计出这样一种执行流程本身体现了攻击者在行动方面造诣颇深，通过IP这种难以精确控制的资源作为控制载体从侧面能够体现出攻击者本身维护了一个庞大的基础设施网络资源库，同时也体现出了该组织较为雄厚的经济实力。</p><h3 id="0x30-追溯"><a href="#0x30-追溯" class="headerlink" title="0x30 追溯"></a>0x30 追溯</h3><hr><p>在前言中提到，已被捕获的攻击行为实质上提供了一个直接触碰攻击组织的窗口。</p><p>现在我们捕获了样本，并对所实现功能进行了完整分析并初步推断了原因。接下来只要以此为基础进行拓展，便能追寻出关于攻击者更多的蛛丝马迹。</p><h4 id="0x31-域名"><a href="#0x31-域名" class="headerlink" title="0x31 域名"></a>0x31 域名</h4><hr><p>从样本DGA算法中我们知晓，敲门阶段的DGA域名包含可解密信息，而互联网上大量可供查询的PDNS记录为我们收集此类信息提供了足够多的样本。</p><p>从代码层面分析可以得出，攻击者设计了一套精妙的DGA技术用于信息渗出及指令下达。但也正因为如此，我们可以通过奇安信司南系统（PDNS）提供的数据对攻击组织的活动进行时空层面的回溯并反推出具体的行动规划。</p><p>一阶段DGA域名的作用是通过DNS请求，将内网DNS域完整传递至探针主控端，在绝大多数时候这等同于Windows AD域名。通过AD域名可以推断出实际的受影响范围并尝试猜测攻击者的战略目的。</p><p>将DGA域名进行Base32解码，查看首字节最高位是否置位，即可筛选出全部一阶段DGA域名；将第15个字符转换后和第1个字符相减，即可确认这是分段传输中的第几部分；从第16个字符开始是有效内容的片段，将所有片段按顺序组合并进行Base32，最终将得到完整的AD域名。具体代码实现参考文末链接，在此不做赘述。</p><p>根据奇安信CERT对该事件的持续追踪分析，截止12月16日，已确认受害的重要机构至少200家，波及北美、欧洲等全球重要科技发达地区的敏感机构，其中美国占比超过60%。</p><h4 id="0x32-时间"><a href="#0x32-时间" class="headerlink" title="0x32 时间"></a>0x32 时间</h4><hr><p>同样的，敲门第二阶段包含大量时间信息。同样将DGA域名进行Base32解码，首字节最高位未置位即表明是二阶段DGA域名；将解码后的数据和第一字节异或，即可得到原文；原文的9、10、11三个字节即为以大端序存储，从2010-1-1开始，以半小时为单位的时间戳。</p><p>同样结合0x31中的DGA域名，我们可以成功解密出更多的数据，<strong>这些数据可以揭示攻击组织花费了6个月以上的时间进行目标筛选与识别工作</strong>。而在具体的时间跨度上，第一个出现的时间戳为2020/4/4 6:30:00（图38），考虑到至少12天的延时，最早在2020/3/23 6:30:00已有受害者被植入恶意样本。</p><p><img alt="6400035" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/6400035.png"></p><p>图38</p><p>另外一个时间角度，我们可以从VT上面查找所有SolarWinds.Orion.Core.BusinessLayer.dll，并确认其编译时间。根据VT上全部66个样本的结果，最早一个存在后门的版本编译于2020/3/17（图39）。</p><p><img alt="6400036" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/6400036.png"></p><p>图39</p><p>通过奇安信司南系统提供的WHOIS变更记录也可以看到，攻击者在2020/02/26 12:04:03 GMT对NS记录进行了初次变更（图40），并指向了已知的六个恶意控制中枢服务器。</p><p><img alt="6400037" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/6400037.png"></p><p>图40</p><p>这里值得注意的是，在行动筹备、实施阶段（2020年2月26日至2020年10月8日）发生的whois记录更新为北京时间的20点至22点，美国相关组织强制修改的时间为北京时间的0点至2点。</p><p>众所周知，美国与中国的时差大致为12小时（地球半圈儿），说明美国人在正常的工作时间内完成了本次接管操作。由此推断，攻击者与美国的距离大约是小半圈儿。</p><h4 id="0x33-伪装"><a href="#0x33-伪装" class="headerlink" title="0x33 伪装"></a>0x33 伪装</h4><hr><p>任何有代码功底的人看到本次样本的代码都应如同感到耳目一新，和充斥于安全圈的低质量代码不同，此样本的编码非常工整。代码本身高度仿照了SolarWinds的编码方式与命名规范，类名、方法全部采用Pascal命名，而字段和方法则使用驼峰式命名，将大量可复用功能单独抽取变为方法，将同功能代码封装为类，这些均是微软推荐的标准C#编程规范。</p><p>类似编码规则会大大增强针对Review以及代码自动扫描时的存活能力。事实上如果不是对安全有所涉猎的人员，单纯开发人员几乎很难发现代码中隐藏的问题。</p><p>同时，代码本身融入了安全人员“滥用”的思想，其代码中大量写做A表示B的成员提供了绝佳的掩饰，例如：</p><p>AddressFamilyEx.Atm表示内网黑名单。</p><p>AddressFamilyEx.ImpLink表示外网黑名单。</p><p>AddressFamilyEx.NetBios表示白名单。</p><p>CryptoHelper.Base64Encode实际为自定义映射表的Base32编码。</p><p>CryptoHelper.Base64Decode实际用于映射表替换。</p><p>DnsRecords._type和DnsRecords.length用于控制HTTP行为。</p><p>大量的TimeStamps实际上表示字符串Hash。</p><p>不影响原本功能的情况下复用数值型配置ReportWatcherRetry和ReportWatcherPostpone。</p><p>等等等等，不一而足。</p><p>上述举重若轻的实现体现出攻击者极为老练的代码功底。NativeMethods、AddressFamilyEx、nList、nCount等命名有着太过强烈的微软风格。事实上结合上述信息我们完全可以断定，探针的开发人员中至少有一名极为熟悉WindowsAPI编程与DotNetFramework源码的核心人员，此人在对方组织内负责把控整体的代码工程，包含设计、构建、编写甚至Review。根据代码工整度与实现逻辑的清晰程度，我们有理由相信其从事相关工作的时间至少在三至五年以上。</p><h4 id="0x34-WebShell"><a href="#0x34-WebShell" class="headerlink" title="0x34 WebShell"></a>0x34 WebShell</h4><hr><p>除供应链攻击的核心探针工程之外，还存在一个带有webshell功能的扩展文件：App_Web_logoimagehandler.ashx.b6031896.dll，其作用为动态编译代码并反射加载执行。</p><p>和探针工程相比，这是一个极为蹩脚的后门实现。首先代码隐藏的不够深入；其次，有一行遗留的调试信息未删除（图41）：</p><p><img alt="6400038" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/6400038.png"></p><p>图41</p><p>编码中的clazz和\n（图42）暴露了开发者实际上是java出身的事实：</p><p><img alt="6400039" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/6400039.png"></p><p>图42</p><p>C#在运行时没有class的概念，只有Type；微软一直坚持的分隔符也是\r\n。</p><p>但即使是这样，不可否认这是一个新型后门。我们可以大胆推测攻击者开发了一套对应的连接工具，用于对部署了此后门的站点进行管理。</p><p>原始安装包中自带的文件带有数字签名（图43），而我们发现的恶意样本（c15abaf51e78ca56c0376522d699c978217bf041a3bd3c71d09193efa5717c71）没有数字签名（图44）。</p><p><img alt="6400040" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/6400040.png"></p><p>图43</p><p><img alt="6400041" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/6400041.png"></p><p>图44</p><p>由此我们可以做一个大胆假设：该后门有可能是在针对某个目标的具体行动中由具体执行的成员临时修改logoimagehandler.ashx文件进行植入，最终DLL由Asp.Net动态编译生成。</p><p>一名不愿意透漏姓名（未登录）的用户于2020-11-24 19:55:35，通过WEB接口将恶意样本上传至VT，其来源显示为US（图45）。这表明可能来源于美国的某名安全分析师于2020年11月24日启动了SolarWinds供应链攻击事件的相关调查工作。</p><p><img alt="6400042" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/6400042.png"></p><p>图45</p><h3 id="0x40-行动"><a href="#0x40-行动" class="headerlink" title="0x40 行动"></a>0x40 行动</h3><hr><p>我们通过代码分析以及信息追溯，大致整理了部分信息作为描述攻击者的论据。</p><p>接下来要做的便是结合时间节点以及真实APT攻击的上下游环境，通过合理的推断，为攻击者描绘更为深入的画像。</p><h4 id="0x41-周期"><a href="#0x41-周期" class="headerlink" title="0x41 周期"></a>0x41 周期</h4><hr><p>在0x32中我们已经通过开源情报搜集，结合DGA解密获取到了全部的时间信息，将时间信息按月份进行排列（图46），可得到下列结果：</p><p><img alt="6400043" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/6400043.png"></p><p>图46</p><p>很明显，从四月初开始请求频次逐渐增加，七月份到达顶峰，九月份大幅降低，十月份近乎消失。</p><p>随后注意WHOIS变更记录，前文提到攻击者在2020/02/26 12:04:03 GMT对NS记录进行了初次变更（图47），这实际上可以标志着整个供应链打击行动的开始。</p><p><img alt="6400044" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/6400044.png"></p><p>图47</p><p>最后，我们观察VT样本列表。如图所示，黄色部分表示样本中已存在相关类，但不存在恶意代码，红色部分表示为完整功能的样本。</p><p><img alt="6400045" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/6400045.png"></p><p>我们可以看到攻击者早在2019/10/10便已经控制了代码仓库，由此逆推SolarWinds公司被控制的时间可能在2019年初甚至更早。</p><p>此次行动仅仅植入了一行包含无害信息的测试代码。我们推测此次意图是用于验证攻击手法是否能够成功，并据此推断后续行动所需时间。攻击者有可能控制了某个安装了SolarWinds的目标，或是本身即为SolarWinds客户的一员。总之，攻击者可以通过某种方式判断在接下来的软件更新中是否可以将恶意代码分发至下游。</p><p>通过2019年10月10日的测试之后，攻击者于2020/3/17成功在Solarwinds中植入了恶意代码，并在三、四、五三个月内接连在三个主要版本上发布了六次，这和DGA解密出的请求时间相匹配。</p><p>随后在八月份，SolarWinds接连发布了四个不存在恶意代码的版本，我们推测正是由于此版本的推出造成大量客户端更新，最终导致了请求量急剧下降。由于官方在本次事件披露之前并未发布任何安全公告，我们更倾向于认为这是攻击组织有预谋的撤退手段，而非实际意义上的权限丢失。</p><p>综合上述信息，我们可以总结出时间轴（图48）如下：</p><p><img alt="6400046" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/6400046.png"></p><p>图48</p><h4 id="0x42-疑问"><a href="#0x42-疑问" class="headerlink" title="0x42 疑问"></a>0x42 疑问</h4><hr><p>显然，攻击者具有极强的耐心，以及有足够的技术支撑与基础设施支持。这样的攻击者不可能由业余人员临时组成。这些攻击者有着极强的专业能力以及高度的纪律性，本次事件绝不可能是第一次攻击活动，那么之前这些攻击者的目标是什么？</p><p>SolarWinds并非唯一的供应链提供商，事实上软件供应商多如牛毛，那么本次攻击是否仅仅是冰山一角？该组织在攻入SolarWinds之后看似“停滞”的时间中是否已经控制了其它更多的供应商？被供应链攻击打击的目标同样可能扮演供应商的角色（无论是软件、服务亦或其他），攻击者是否已经通过本次攻击移动到了其它打击阵地？</p><p>同时供应链攻击的特性决定了此次攻击只属于完整APT链条的开始，后续必然跟随着更多的行动。根据已知信息，近几个月来至少有接近千家公司存在被控制的可能，这样大量的内网渗透行为由谁来开展，又会有多少人？</p><p>APT攻击的根本目的是用于将攻击转换为实际价值，无论是商业目的、金钱目的或是其他。或许有部分黑客的目的只是在炫技中得到无上的成就感，但本次攻击显然不是。本次攻击波及到包括政府、经济、金融、医疗等方方面面，攻击者的根本目的或倾向是什么？</p><p>最后，又是谁在指挥上述的一切？</p><h4 id="0x43-推测"><a href="#0x43-推测" class="headerlink" title="0x43 推测"></a>0x43 推测</h4><p>由于资料不足，上面的疑问依旧处于黑暗之中。我们希望在后续的持久关注中能够搜集到更多的信息，最终将关于此次行动以及背后组织的事实，完整的展现在公众面前。</p><p>但综合已知的种种，我们至少可以总结出以下信息：</p><ol><li><p>攻击者技术高超，具有非常熟练的APT行动基础框架设计能力以及对应项目的开发能力。</p></li><li><p>攻击者手段老练，具有高度的耐心与隐藏能力。</p></li><li><p>攻击者储备了大量的IP资源等基础设施，用于提供C2基础服务、敲门-控制阶段的出网策略配置等。</p></li><li><p>攻击者存在专业支撑团队进行其他后门的开发、留存等操作。</p></li><li><p>攻击者具有单独的后续攻击团队用于后渗透。</p></li><li><p>攻击者在后渗透过程中具有单独的C2通道。</p></li><li><p>攻击者具有在广泛攻击面中筛选、搜寻、处理、回传、消化有价值信息的能力。</p></li><li><p>攻击者具有稳定的匿名身份与足够的财力，用于支撑上述基础设施与人员开销。</p></li><li><p>攻击者具有统一的指挥机构设计整体战略，并协调上述全部战术行为。</p></li></ol><p>最后，结合所有证据，终将指向以下推测：</p><p>SolarWinds供应链攻击（金链熊）事件，是一场由专业APT组织进行谋划，由基础建设团队提供链路与武器，由供应链团队经过至少两年的踩点与渗透，由分析团队进行目标确认，由后渗透团队实行深入控制，通过供应链打击的实质形式，有组织、有目的、成建制进行的网络攻击行动。</p><h3 id="0x50-总结"><a href="#0x50-总结" class="headerlink" title="0x50 总结"></a>0x50 总结</h3><hr><p>由于域名已被微软进行接管并指向了黑名单（20.140.0.1），本次攻击行动实质上已经完全终止。限于信息的不足，对于该行动的分析至此告于段落。</p><p>但这不是终点，本次的攻击者如同老练的猎手，在黑暗中一步步谨慎的筹划并实施这一切。从本次分析的结论来看，攻击者体现出了极强的纪律性：明确放弃了至少30%以上的目标。这完全不符合一般的以获利为主要目的商业黑客行为，也有别于一些缺乏明确战略情报意图驱动的普通行为体。</p><p>纵观本次暴露的种种迹象，无论是控制SolarWinds、实施供应链攻击或是具体目标的后渗透行为均表现出了明显的非线性作业模式，表现出的综合能力、跨领域知识，令人惊叹。我们推测这背后是在某个指挥机构的领导下，按照能力与机会导向的行动模式，按部就班有条不紊的实施攻击。同时不排除其背后有相关的科研机构、研发中心支持，及与情治机构的信息共享的可能。</p><p>具有如此能力水准的攻击组织必然会执行其他的行动。事实上纵观已被披露的APT攻击历史，一个被披露的行动背后往往是十个未被发现的行动，对此需要长期关注，并有意识的根据技术特点、战术行动导向及可能的战略意图进行归类。</p><p>其次，样本分析作为安全从业者必不可缺的技能，实质上是多种技能的结合体。没有实战行动经验的分析人员不可能领略攻击者的真实意图，没有代码功底的分析人员不可能完全看到代码设计背后暴露出的思想。样本分析工作绝对不是对照各类日志和官方文档说明，就能做好的事情，类似由专业组织策划并实施的行动，只有同样老练的专业人员才能进行对抗，并在蛛丝马迹中寻觅到被层层遮掩的真相。</p><p>每一位安全从业者都应当更多的接触真实攻击的内容，并将其与已知攻击进行对照，逐步形成自己的攻防体系。只有这样才能更贴合实际，提升自己的能力水准，最终在对抗中，真正将“以攻促防”进行落地。</p><p>没有人愿意处于危机四伏的世界，而在虚拟世界中进行破坏的成本要远比现实世界更低。</p><p>让网络更安全，让世界更美好。</p><p>不忘初心，方得始终。</p><p>zcgonvh@A-TEAM、rem4x@A-TEAM于庚子年冬月初八戌时一刻</p><h2 id="域名生成算法（DGA）基础"><a href="#域名生成算法（DGA）基础" class="headerlink" title="域名生成算法（DGA）基础"></a>域名生成算法（DGA）基础</h2><p><strong>域名生成算法（DGA）</strong></p><p>僵尸网络正在威胁着互联网网民的安全。僵尸网络中受到恶意软件感染的僵尸主机由僵尸控制者通过C&amp;C主机进行控制。僵尸主机常常利用DNS授权服务器来解析域名，目的是为了跟C&amp;C服务器创建通信通道，然后获取控制命令，从而进行网络恶意活动。<br>在早期，僵尸主机通产采用轮询的方法访问硬编码的C&amp;C域名或IP来访问服务器获取域名，但是这种方式在安全人员进行逆向之后会得到有效的屏蔽。目前，黑客攻击者为了防止恶意域名被发现，会使用 Domain Flux 或者IP Flux来快速生成大量的恶意域名。Domain Flux是通过不断变换域名，指向同一个IP，IP Flux是只有一个域名，不断变换IP，一个域名可以使用多个IP。域名生成算法(Domain Generation Algorithm)，是一种利用随机字符来生成C&amp;C域名,从而逃避域名黑名单检测的技术手段。</p><p><strong>DGA运行方式</strong></p><p><strong>攻击者端（bot-master）</strong></p><p>使用种子运行DGA生成大量域名，随机选择少量的域名进行注册（可能生成了5000个只注册1-2个），攻击者将该域名注册并指向其C&amp;C服务器。</p><p><strong>受害者端（bot）</strong></p><p>使用同样的种子运行DGA，生成大量域名，逐个访问这些域名，检测是否存在，如果该域名未注册，程序继续检测其他域名，如果该域名已注册【如果某生成域名发生了被抢注的情况该怎么办？不处理，因为那些域名并不能发攻击指令，看设计方案是否要继续进行轮询】，那么恶意软件将选择使用该域名联系C&amp;C服务器。<br>DGA使用的种子有很多种类，包含日期、社交网络搜索热词、随机数或字典，生成一串字符前缀，添加TLD（如com、org等）后得到最终生成域名AGD（Algorithmically Generated Domain） 。<br>【怎样确定同样的种子？在程序中内嵌。但是安全人员逆向了之后仍旧不能确定种子是什么，因为并不能知道攻击者究竟以什么字段作为种子】</p><p><strong>DGA的危害</strong></p><p>DGA每天可以生成成千上万的恶意域名，但仅选择一小部分作为后续的攻击域名，相对于传统硬编码的恶意域名，更难检测。</p><p><strong>DGA的优缺点</strong></p><p><strong>DGA的优点</strong></p><p>1、使用DGA的僵尸网络有较为健壮的寻址方式，可对抗域名黑名单屏蔽、静态声望系统以及特征码检测系统。<br>2、DGA是一种理想的备用信道，可作为back up手段恢复僵尸网络控制，如Zeus v3。</p><p><strong>DGA的缺点</strong></p><p>1、需要逐一便利AGD，寻址效率低。<br>2、大量NXDomain流量导致通信易被检测发现。<br>3、如果AGD数量过多，出于时间和金钱成本开销，攻击者难以全部注册，防御人员可以抢注并通过sinkhole手段测量或劫持僵尸网络。</p><p><strong>DGA分类</strong></p><p><strong>根据种子性质分类</strong></p><p>1、根据种子是否依赖于时间分为两类：依赖于时间的和不依赖于时间的。<br>时间来源于被入侵主机的系统时间，或HTTP响应报文中的日期字段。<br>2、种子是否确定：确定的和不确定的。<br>大多数DGA的种子都是确定的，即可以预测该DGA未来使用的种子和以此产生的域名。<br>一些DGA的种子是不确定的，</p><p>上述两种方法将DGA划分为四个类别：<br>TID、TDD、TDN、TIN</p><p>根据生成算法分类</p><p>1、基于算术（Arithmetic-based）的DGA：<br>计算一系列的数值，这些值能根据ASCII码直接表示成域名，或者这些值作为偏移值，指向在DGA在DGA中硬编码的字符表中的一个字符。大部分DGA都属于这一类。<br>2、基于哈希（Hash-based）的DGA：<br>使用十六进制表示的哈希值生成AGD。这DGA常使用SHA256和MD5两种哈希值。<br>3、基于单词表（Wordlist-based）的DGA：<br>从一个或多个单词表中选择单词并连接成一个域名，这样的域名更具有迷惑性。<br>4、基于置换（Permutation-based）的DGA</p><h2 id="相关链接🔗"><a href="#相关链接🔗" class="headerlink" title="相关链接🔗"></a>相关链接🔗</h2><p><strong>维基百科：<a href="https://en.wikipedia.org/wiki/FireEye" target="_blank" rel="noopener">FireEye</a></strong></p><p><strong>Freebuf：<a href="https://www.freebuf.com/news/257026.html" target="_blank" rel="noopener">APT研究公司 FireEye 反遭 APT 入侵，大量红队工具被窃</a></strong></p><p><a href="https://www.fireeye.com/blog/threat-research/2020/12/evasive-attacker-leverages-solarwinds-supply-chain-compromises-with-sunburst-backdoor.html" target="_blank" rel="noopener">https://www.fireeye.com/blog/threat-research/2020/12/evasive-attacker-leverages-solarwinds-supply-chain-compromises-with-sunburst-backdoor.html</a></p><p><a href="https://mp.weixin.qq.com/s/YDgyDru9HL7ql_mC619prA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/YDgyDru9HL7ql_mC619prA</a></p><p><a href="https://www.microsoft.com/security/blog/2021/01/20/deep-dive-into-the-solorigate-second-stage-activation-from-sunburst-to-teardrop-and-raindrop/" target="_blank" rel="noopener">https://www.microsoft.com/security/blog/2021/01/20/deep-dive-into-the-solorigate-second-stage-activation-from-sunburst-to-teardrop-and-raindrop/</a></p><p><a href="https://paper.seebug.org/1459/" target="_blank" rel="noopener">https://paper.seebug.org/1459/</a></p><p><a href="https://news.microsoft.com/zh-tw/features/analyzing-solorigate-the-compromised-dll-file-that-started-a-sophisticated-cyberattack-and-how-microsoft-defender-helps-protect-customers/" target="_blank" rel="noopener">https://news.microsoft.com/zh-tw/features/analyzing-solorigate-the-compromised-dll-file-that-started-a-sophisticated-cyberattack-and-how-microsoft-defender-helps-protect-customers/</a></p><p><a href="https://paper.seebug.org/1443/" target="_blank" rel="noopener">https://paper.seebug.org/1443/</a></p><p><a href="https://mp.weixin.qq.com/s/AuJGREVZUPQI6kbtbPd1GQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/AuJGREVZUPQI6kbtbPd1GQ</a></p><p><a href="https://mp.weixin.qq.com/s/DsFgqpQ2Gbs0j0aQaFbsYA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/DsFgqpQ2Gbs0j0aQaFbsYA</a></p><p><a href="https://www.cnblogs.com/mednspod/p/14150320.html" target="_blank" rel="noopener">https://www.cnblogs.com/mednspod/p/14150320.html</a></p><p><a href="https://github.com/Shadow0ps/solorigate_sample_source" target="_blank" rel="noopener">https://github.com/Shadow0ps/solorigate_sample_source</a></p>]]></content>
      
      
      <categories>
          
          <category> 知识笔记 </category>
          
          <category> APT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Supply Chain Attack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Install Arch Linux</title>
      <link href="/2021-02-12/install-arch-linux/"/>
      <url>/2021-02-12/install-arch-linux/</url>
      
        <content type="html"><![CDATA[<h1 id="Arch-Linux-安装过程"><a href="#Arch-Linux-安装过程" class="headerlink" title="Arch Linux 安装过程"></a>Arch Linux 安装过程</h1><ol><li>Arch Linux 简单介绍（官网、Wiki等）</li><li>Arch Linux 安装过程（Vmware为例）</li><li>安装过程中的一些总结</li></ol><a id="more"></a><h2 id="一、Arch-Linux-简单介绍"><a href="#一、Arch-Linux-简单介绍" class="headerlink" title="一、Arch Linux 简单介绍"></a>一、Arch Linux 简单介绍</h2><blockquote><p>Arch Linux 是一款基于 x86-64 架构的 Linux发行版 。<br>系统主要由自由和开源软件组成，支持社区参与。系统设计以 KISS原则（保持简单和愚蠢）为总体指导原则，注重代码正确、优雅和极简主义，期待用户愿意去理解系统的运作。Arch Linux 采用pacman作为默认的软件包管理器。Arch Linux 采用滚动发行模式。Arch Linux 以社区 Wiki 的形式提供文档，称为 ArchWiki。</p></blockquote><p>Arch Linux<a href="https://www.archlinux.org/" target="_blank" rel="noopener">官方网站</a> </p><p>Arch Linux <a href="https://wiki.archlinux.org/" target="_blank" rel="noopener">Wiki</a></p><p>Arch Linux<a href="https://www.archlinuxcn.org/" target="_blank" rel="noopener">中文社区</a></p><h2 id="二、Arch-Linux-安装过程"><a href="#二、Arch-Linux-安装过程" class="headerlink" title="二、Arch Linux 安装过程"></a>二、Arch Linux 安装过程</h2><p>Arch Linux 并不是适合Linux新手的发行版，相较于其他发行版有图形界面引导的流程化的安装过程，Arch Linux安装过程对新手相对不友好。但通过这个安装过程可以提升对Linux的了解与掌握程度。</p><p>安装目标是装好最简单的一个带有桌面的 Arch Linux(以Vmware为例).</p><h3 id="2-1-安装前的准备"><a href="#2-1-安装前的准备" class="headerlink" title="2.1 安装前的准备"></a>2.1 安装前的准备</h3><h4 id="2-1-1-下载镜像："><a href="#2-1-1-下载镜像：" class="headerlink" title="2.1.1 下载镜像："></a>2.1.1 下载镜像：</h4><p>官方<a href="https://www.archlinux.org/download/" target="_blank" rel="noopener">下载地址</a></p><p>国内镜像地址：<a href="https://mirrors.tuna.tsinghua.edu.cn/archlinux/iso/" target="_blank" rel="noopener">清华大学开源软件镜像站</a>、<a href="http://mirrors.163.com/archlinux/iso/" target="_blank" rel="noopener">网易开源镜像站</a></p><p>这里下载的是archlinux-2020.09.01-x86_64.iso</p><p>校验文件完整性：</p><p>官网给出的MD5和SHA1：</p><ul><li><strong>MD5：</strong> ebcdb2223a77f098af3923fe1fa180aa</li><li><strong>SHA1：</strong> 95ebacd83098b190e8f30cc28d8c57af0d0088a0</li></ul><p>Windows下查看文件MD5和SHA1：</p><p>CertUtil -hashfile 文件名 [ Hash算法 ] （默认为SHA1，要大写）</p><p><img alt="Hash" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/Hash.png"></p><p>完整性检验完成。</p><h4 id="2-1-2-创建虚拟机："><a href="#2-1-2-创建虚拟机：" class="headerlink" title="2.1.2 创建虚拟机："></a>2.1.2 创建虚拟机：</h4><p>使用Vmware workstation虚拟机来安装Arch Linux，首先新建一个虚拟机，为Arch Linux了分配了1G内存和10G的硬盘，配置允许的话可以使用更大的内存和硬盘空间。</p><p><img alt="00" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/00.png"></p><img alt="01" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/01.png"><p><img alt="02" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/02.png"></p><p>VMWare在新建虚拟机选择系统时是没有Arch Linux的选项的，这里我选择的是“其他Linux 5.x或更高版本内核 64位”。</p><p><img alt="03" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/03.png"></p><p><img alt="04" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/04.png"></p><p><img alt="05" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/05.png"></p><p>在虚拟机中设置下载好的ISO映像文件的路径，即”使用 ISO 映像文件（M）“—-&gt;浏览选择之前下载好的镜像文件。</p><p><img alt="06" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/06.png"></p><p>在“虚拟机-&gt;设置-&gt;选项-&gt;高级”中勾选”通过UEFI“选项；</p><p>注意：安装映像使用 systemd-boot 在 UEFI 模式下引导，使用 syslinux 在 BIOS 模式下引导。</p><blockquote><p><strong>systemd-boot</strong> (以前被称为<strong>gummiboot</strong>) 是可以执行 EFI 镜像文件的简单 UEFI 启动管理器。启动的内容可以通过一个配置(glob)或者屏幕菜单选择。Arch 默认安装的 <a href="https://www.archlinux.org/packages/?name=systemd" target="_blank" rel="noopener">systemd</a> 提供了这个功能。</p></blockquote><h4 id="2-1-3-启动到-Live-环境："><a href="#2-1-3-启动到-Live-环境：" class="headerlink" title="2.1.3 启动到 Live 环境："></a>2.1.3 启动到 Live 环境：</h4><p>在vmware开启刚刚创建的虚拟机</p><p><img alt="07" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/07.png"></p><p>使用EFI引导时的启动界面如上图，选择第一项启动。</p><p>以 root 身份登录进一个虚拟控制台，默认的 Shell 是 Zsh</p><p><img alt="image-20201011165951263" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/image-20201011165951263.png"></p><h4 id="2-1-4-验证启动模式"><a href="#2-1-4-验证启动模式" class="headerlink" title="2.1.4 验证启动模式"></a>2.1.4 验证启动模式</h4><p>ls /sys/firmware/efi/efivars</p><p><img alt="image-20201011170537003" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/image-20201011170537003.png"></p><p>如果命令没有错误地显示了目录，则系统以 UEFI 模式启动。<br>如果提示ls: cannot access ‘/sys/firmware/efi/efivars’: No such file or directory表明是以BIOS方式引导。</p><h4 id="2-1-5-连接到因特网"><a href="#2-1-5-连接到因特网" class="headerlink" title="2.1.5 连接到因特网"></a>2.1.5 连接到因特网</h4><p>Arch Linux并不能离线安装，因为需要联网来下载需要的组件，所以首先要连接网络。</p><p>由于Arch Linux在启动后，守护进程dhcpcd已被默认启用以探测有线设备，如果是在真机上安装的话，请确保使用的是有线网络。</p><p>有线网络：dhcpcd</p><p>systemctl restart dhcpcd</p><p>无线网络：iwctl </p><p>device list</p><p>ping命令检查网络连接是否正常：</p><p><img alt="image-20201011172142207" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/image-20201011172142207.png"></p><h4 id="2-1-6-更新系统时间"><a href="#2-1-6-更新系统时间" class="headerlink" title="2.1.6 更新系统时间"></a>2.1.6 更新系统时间</h4><p>timedatectl set-ntp true</p><p>正常情况下这个命令没有输出，ntp服务会每隔一段时间进行一次网络对时</p><h4 id="2-1-7-建立硬盘分区"><a href="#2-1-7-建立硬盘分区" class="headerlink" title="2.1.7 建立硬盘分区"></a>2.1.7 建立硬盘分区</h4><p>查看当前的分区情况<br>fdisk -l或者lsblk</p><p><img alt="image-20201011172903662" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/image-20201011172903662.png"></p><p>结果中以 rom，loop 或者 airoot 结束的可以被忽略；</p><p>sda即是我分配给虚拟机的10GB硬盘，因为sda节点下无任何显示，所以此硬盘还没有分区；loop0和sr0可以忽略。</p><p>以下的分区是必须要有的：</p><p>一个根分区（挂载在根目录）/；<br>要在 UEFI 模式中启动，还需要一个 EFI 系统分区。</p><p>对这10GB的硬盘进行分区，能够创建分区的命令很多，如fdisk，parted，cfdisk等</p><p>前面设置的是EFI引导，因此需要在此处需分一个EFI分区（EFI分区推荐大小为512MB）。使用cfdisk分区命令后进入分区界面：</p><p><img alt="image-20201011174048189" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/image-20201011174048189.png"></p><p>选择gpt分区表，进入之后，划分3个必要分区，分别为根分区，EFI系统分区，Swap分区。</p><p><img alt="image-20201011202355279" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/image-20201011202355279.png"></p><p><img alt="image-20201011202446726" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/image-20201011202446726.png"></p><p><img alt="image-20201011202903372" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/image-20201011202903372.png"></p><p>分区好之后，选择write生效；输入yes，选择exit即可退出。</p><p>再次使用lsblk查看一下：</p><p><img alt="image-20201011202944109" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/image-20201011202944109.png"></p><h4 id="2-1-8-格式化分区"><a href="#2-1-8-格式化分区" class="headerlink" title="2.1.8 格式化分区"></a>2.1.8 格式化分区</h4><p>分区完成后，需要对分区做格式化处理，由于这里使用了EFI分区，因为EFI分区需要FAT32文件格式，所以需要将其格式化为FAT32格式；根分区格式化为ext4格式；设置并开启Swap分区；</p><p>mkfs.fat -F32 /dev/sda1<br>mkfs.ext4 /dev/sda2</p><p>初始化交换分区：<br>mkswap /dev/sda3 -L Swap<br>swapon /dev/sda3</p><h4 id="2-1-9-挂载分区"><a href="#2-1-9-挂载分区" class="headerlink" title="2.1.9 挂载分区"></a>2.1.9 挂载分区</h4><p>格式话完成后，需要将分区挂载到 /mnt ，先挂载根分区（此例为/dev/sda2）；然后使用 mkdir创建其他剩余的挂载点（比如 /mnt/efi）并挂载其相应的分区，再挂载EFI分区（这里是/dev/sda1），<br>挂载EFI分区时，需要在/mnt上先创建 boot/EFI 目录，然后将EFI分区挂载到/mnt/boot/EFI上；Sawp分区不需要挂载；</p><p>mount /dev/sdaX /mnt  （sdaX改为自己的根分区 ）<br>mkdir -p /mnt/boot/EFI<br>mount /dev/sda1 /mnt/boot/EFI</p><p><img alt="image-20201011204425716" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/image-20201011204425716.png"></p><h3 id="2-2-安装"><a href="#2-2-安装" class="headerlink" title="2.2 安装"></a>2.2 安装</h3><h4 id="2-2-1-选择镜像"><a href="#2-2-1-选择镜像" class="headerlink" title="2.2.1 选择镜像"></a>2.2.1 选择镜像</h4><p>文件 /etc/pacman.d/mirrorlist 定义了软件包会从哪个镜像源下载；尽量选择国内的镜像源，否则，因为国内网络环境的关系，选择其他国家或地区的镜像源，安装时可能很慢或失败。</p><p>reflector 会通过选择最近一个小时已同步的 HTTPS 镜像并按下载速率对其进行排序来更新镜像列表。在列表中越前的镜像在下载软件包时有越高的优先权。</p><p><img alt="image-20201011214725734" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/image-20201011214725734.png"></p><h4 id="2-2-2-安装必须的软件包"><a href="#2-2-2-安装必须的软件包" class="headerlink" title="2.2.2 安装必须的软件包"></a>2.2.2 安装必须的软件包</h4><p>使用 pacstrap 脚本，安装 base 软件包和 Linux 内核以及常规硬件的固件：<br>pacstrap /mnt base linux linux-firmware</p><p><strong>注意：</strong></p><ul><li>可以将 <a href="https://www.archlinux.org/packages/?name=linux" target="_blank" rel="noopener">linux</a> 替换为 <a href="https://wiki.archlinux.org/index.php/Kernel" target="_blank" rel="noopener">kernel</a> 页面中介绍的内核软件包。</li><li>在虚拟机或容器中安装时，可以不安装固件软件包。</li></ul><p><a href="https://www.archlinux.org/packages/?name=base" target="_blank" rel="noopener">base</a> 软件包并没有包含 Live 环境中的全部程序。因此要获得一个功能齐全的基本系统，可能需要安装其他软件包。特别要考虑安装：</p><ul><li>管理所用<a href="https://wiki.archlinux.org/index.php/File_systems" target="_blank" rel="noopener">文件系统</a>的用户工具；</li><li>访问 <a href="https://wiki.archlinux.org/index.php/RAID" target="_blank" rel="noopener">RAID</a> 或 <a href="https://wiki.archlinux.org/index.php/LVM" target="_blank" rel="noopener">LVM</a> 分区的工具；</li><li>未包含在 <a href="https://www.archlinux.org/packages/?name=linux-firmware" target="_blank" rel="noopener">linux-firmware</a> 中的额外固件；</li><li><a href="https://wiki.archlinux.org/index.php/Networking" target="_blank" rel="noopener">联网</a> 所需要的程序；</li><li><a href="https://wiki.archlinux.org/index.php/Text_editor" target="_blank" rel="noopener">文本编辑器</a>；</li><li>访问 <a href="https://wiki.archlinux.org/index.php/Man" target="_blank" rel="noopener">man</a> 和 <a href="https://wiki.archlinux.org/index.php/Info" target="_blank" rel="noopener">info</a> 页面的工具：<a href="https://www.archlinux.org/packages/?name=man-db" target="_blank" rel="noopener">man-db</a>, <a href="https://www.archlinux.org/packages/?name=man-pages" target="_blank" rel="noopener">man-pages</a> 和 <a href="https://www.archlinux.org/packages/?name=texinfo" target="_blank" rel="noopener">texinfo</a>。</li></ul><p>pacstrap /mnt base linux linux-firmware dhcpcd vim man-db man-pages texinfo lvm2 xfsprogs</p><h3 id="2-3-配置系统"><a href="#2-3-配置系统" class="headerlink" title="2.3 配置系统"></a>2.3 配置系统</h3><h4 id="2-3-1-Fstab"><a href="#2-3-1-Fstab" class="headerlink" title="2.3.1 Fstab"></a>2.3.1 Fstab</h4><p>用以下命令生成 fstab 文件 (用 -U 或 -L 选项设置UUID 或卷标)：<br>genfstab -U /mnt &gt;&gt; /mnt/etc/fstab<br>强烈建议在执行完以上命令后，后检查一下生成的 /mnt/etc/fstab 文件是否正确：<br>nano /mnt/etc/fstab<br>如果生成的fstab文件正确，会看到之前分的分区的信息。</p><p><img alt="image-20201011220655081" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/image-20201011220655081.png"></p><h4 id="2-3-2-Chroot"><a href="#2-3-2-Chroot" class="headerlink" title="2.3.2 Chroot"></a>2.3.2 Chroot</h4><p>Chroot意为Change root，相当于把操纵权交给我们新安装（或已经存在）的Linux系统，执行了这步以后，我们的操作都相当于在磁盘上新装的系统中进行。<br>Change root 到新安装的系统：<br>arch-chroot /mnt<br>chroot之后，当前目录就变成为 / 。此步会自动进行创建初始的ramdisk环境。</p><h4 id="2-3-3-时区"><a href="#2-3-3-时区" class="headerlink" title="2.3.3 时区"></a>2.3.3 时区</h4><p>设置时区：</p><p># ln -sf /usr/share/zoneinfo/Region/City /etc/localtime<br>例如：<br>ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime<br>设置时间标准为UTC，并调整时间漂移：<br>hwclock –systohc –utc<br>运行 hwclock以生成 /etc/adjtime：<br>hwclock –systohc</p><p><img alt="image-20201011221523214" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/image-20201011221523214.png"></p><p><img alt="image-20201011221529701" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/image-20201011221529701.png"></p><h4 id="2-3-4-本地化"><a href="#2-3-4-本地化" class="headerlink" title="2.3.4 本地化"></a>2.3.4 本地化</h4><p>本地化的程序与库若要本地化文本，都依赖 Locale，后者明确规定地域、货币、时区日期的格式、字符排列方式和其他本地化标准。<br>需在这两个文件设置：locale.gen 与 locale.conf。<br>编辑/etc/locale.gen 然后移除需要的地区前的注释符号 #。<br>vim /etc/locale.gen<br>然后找到下面3项，去掉每项前面的#即可：<br>en_US.UTF-8 UTF-8<br>zh_CN.UTF-8 UTF-8<br>zh_TW.UTF-8 UTF-8<br>接着执行 locale-gen 以生成 locale 信息：<br>locale-gen<br>并列出所有启用的Locale：<br>locale -a<br>然后创建 locale.conf 文件，并编辑设定 LANG 变量，比如：<br>vim /etc/locale.conf<br>在文件的第一行加入以下内容：<br>LANG=en_US.UTF-8<br>保存并退出。</p><p><img alt="image-20201011224203465" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/image-20201011224203465.png"></p><p><img alt="image-20201011225421731" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/image-20201011225421731.png"></p><p>/etc/locale.conf用来配置整个系统所使用的Loacle，而这也可以由用户通过用户自己的 ~/.config/locale.conf （~表示当前用户的Home目录）来覆盖整个系统的Locale配置。</p><p><strong>警告： 不推荐在此设置任何中文 locale，会导致 tty 乱码。</strong></p><h4 id="2-3-5-网络配置"><a href="#2-3-5-网络配置" class="headerlink" title="2.3.5 网络配置"></a>2.3.5 网络配置</h4><p>创建 hostname 文件:<br>vim /etc/hostname<br>在文件的第一行输入你自己设定的一个myhostname<br>保存并退出。<br>编辑/etc/hosts文件：<br>127.0.0.1    localhost<br>::1        localhost<br>127.0.1.1    myhostname.localdomain    myhostname<br>将myhostname替换成你自己设定的主机名<br>我这里是arch-Linux.</p><p><img alt="image-20201011225947669" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/image-20201011225947669.png"></p><p><img alt="image-20201011225956653" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/image-20201011225956653.png"></p><p>对新安装的系统，需要再次<a href="https://wiki.archlinux.org/index.php/Network_configuration_(简体中文)" target="_blank" rel="noopener">设置网络</a>，请注意，目前的 <a href="https://www.archlinux.org/packages/?name=base" target="_blank" rel="noopener">base</a> 不含有任何网络管理工具，要安装希望使用的 <a href="https://wiki.archlinux.org/index.php/Network_management" target="_blank" rel="noopener">网络管理</a> 软件。</p><p>利用包管理工具<code>pacman</code>，大部分情况下，一行命令就可以搞定包与依赖的问题。</p><p>安装包的命令格式为<code>pacman -S 包名</code>，<code>pacman</code>会自动检查这个包所需要的其他包（即为依赖）并一起装上。</p><p>pacman -S dhcpcd</p><p>systemctl enable dhcpcd.service</p><h4 id="2-3-6-Root-密码"><a href="#2-3-6-Root-密码" class="headerlink" title="2.3.6 Root 密码"></a>2.3.6 Root 密码</h4><p>设置 Root 密码：<br>passwd<br>输入两次密码（Linux不显示密码）</p><p><img alt="image-20201011230845907" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/image-20201011230845907.png"></p><h4 id="2-3-7-安装引导程序"><a href="#2-3-7-安装引导程序" class="headerlink" title="2.3.7 安装引导程序"></a>2.3.7 安装引导程序</h4><p>需要安装 Linux 引导加载程序,才能在安装后启动系统，可以使用的的引导程序已在 启动加载器中列出，请选择一个安装并配置它，GRUB 是最常见的选择。<br>安装grub：<br>　　grub是一个启动引导器，同时支持EFI和BIOS方式的启动。若使用的UEFI方式引导系统，则还需要安装efibootmgr，如果是双系统的话，还需要安装os-prober，且如果使用Intel CPU的话，则需要安装 intel-ucode 并启用因特尔微码更新。<br>此处使用的是虚拟机和UEFI引导方式，因此只需要安装grub和efibootmgr：<br>pacman -S grub efibootmgr</p><p>然后，还需要将其安装到EFI分区当中：<br>grub-install –recheck /dev/sda<br>最后还需要生成一个grub的配置文件：<br>grub-mkconfig -o /boot/grub/grub.cfg</p><p><img alt="image-20201011231448410" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/image-20201011231448410.png"></p><p><img alt="image-20201011231519667" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/image-20201011231519667.png"></p><p><strong>警告： 这是安装的最后但也至关重要的一步，请按上述指引正确安装好引导加载程序后再重新启动。否则将无法正常进入系统。</strong></p><h4 id="2-3-8-重启"><a href="#2-3-8-重启" class="headerlink" title="2.3.8 重启"></a>2.3.8 重启</h4><p>输入 exit 或按 Ctrl+d 退出 chroot 环境<br>可选用 umount -R /mnt 手动卸载被挂载的分区：这有助于发现任何「繁忙」的分区，并通过 fuser 查找原因。<br>最后，通过执行 reboot 重启系统，systemd 将自动卸载仍然挂载的任何分区。不要忘记移除安装介质，然后使用 root 帐户登录到新系统。</p><p>exit<br>umount -R /mnt<br>reboot</p><p><img alt="image-20201011231820778" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/image-20201011231820778.png"></p><p><img alt="image-20201011231834090" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/image-20201011231834090.png"></p><p>重启系统之后，会出现如上启动界面<br>选择第一个就进入到我们新安装的Arch Linux了，如下图：</p><p><img alt="image-20201011231901836" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/image-20201011231901836.png"></p><p>使用 root 帐户，再输入之前设置的密码登录到新系统；Arch Linux的基础系统安装完成了。<br>由于还没有安装桌面，所以登陆后处在命令行模式。</p><p><img alt="image-20201011231926660" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/image-20201011231926660.png"></p><h3 id="2-4-安装后的配置与图形界面"><a href="#2-4-安装后的配置与图形界面" class="headerlink" title="2.4 安装后的配置与图形界面"></a>2.4 安装后的配置与图形界面</h3><h4 id="2-4-1连接网络"><a href="#2-4-1连接网络" class="headerlink" title="2.4.1连接网络"></a>2.4.1连接网络</h4><p>dhcpcd</p><p>同样可以使用<code>ping</code>命令来测试是否正常联网。</p><p><img alt="image-20201012005903150" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/image-20201012005903150.png"></p><h4 id="2-4-2-新建用户"><a href="#2-4-2-新建用户" class="headerlink" title="2.4.2 新建用户"></a>2.4.2 新建用户</h4><p>root的权限过高，日常使用root用户是不安全的。Linux为我们提供了强大的用户与组的权限管理，提高了整个系统的安全性。这里我们就来新建一个用户。执行以下命令来创建一个名为mumiao的用户:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -m -G wheel mumiao</span><br></pre></td></tr></table></figure><p><code>-m</code>：在创建时同时在<code>/home</code>目录下创建一个与用户名同名的文件夹，这个目录就是你的<strong>家目录</strong>啦！家目录有一个别名是<code>~</code>，你可以在任何地方使用<code>~</code>来代替家目录路径。</p><p><code>-G wheel</code>：<code>-G</code>代表把用户加入一个组.</p><p>为新用户设置一个密码，执行如下命令:</p><p>passwd mumiao</p><p><img alt="image-20201012013012718" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/image-20201012013012718.png"></p><h4 id="2-4-3-配置sudo"><a href="#2-4-3-配置sudo" class="headerlink" title="2.4.3 配置sudo"></a>2.4.3 配置sudo</h4><p>现在已经创建好了一个新的用户，以后可使用这个用户来登录，那么如果需要执行一些只有<code>root</code>用户才能执行的命令（例如修改系统文件、安装软件包）时怎么办？</p><p>通过 su 命令来切换到<code>root</code>用户执行命令后再通过 exit 退回普通用户;</p><p>另一个更快捷的办法，使用<code>sudo</code>，我们只要在需要<code>root</code>权限执行的命令之前加上<code>sudo</code>就可以。</p><p><code>sudo</code>本身也是一个软件包，所以我们需要通过<code>pacman</code>来安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S sudo</span><br></pre></td></tr></table></figure><p><img alt="image-20201012020539849" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/image-20201012020539849.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">visudo</span><br></pre></td></tr></table></figure><p>找到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># %wheel ALL=(ALL)ALL</span><br></pre></td></tr></table></figure><p>这行，去掉之前的<code>#</code>注释符，保存并退出.</p><p>这里的<code>%wheel</code>就是代表<code>wheel</code>组，意味着<code>wheel</code>组中的所有用户都可以使用<code>sudo</code>命令。</p><p><img alt="image-20201012020755083" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/image-20201012020755083.png"></p><h4 id="2-4-4-安装Xorg"><a href="#2-4-4-安装Xorg" class="headerlink" title="2.4.4 安装Xorg"></a>2.4.4 安装Xorg</h4><p><code>Xorg</code>是<code>Linux</code>下的一个著名的开源图形服务，我们的桌面环境需要<code>Xorg</code>的支持。</p><p>执行如下命令安装<code>Xorg</code>及相关组件：</p><p>sudo pacman -S xorg</p><p><img alt="image-20201012022051709" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/image-20201012022051709.png"></p><h4 id="2-4-5-安装桌面环境"><a href="#2-4-5-安装桌面环境" class="headerlink" title="2.4.5 安装桌面环境"></a>2.4.5 安装桌面环境</h4><p><code>Linux</code>下有很多著名的桌面环境如<code>Xfce</code>、<code>KDE(Plasma)</code>、<code>Gnome</code>、<code>Unity</code>、<code>Deepin</code>等等</p><p>我选择的是<code>Xfce</code>和非常流行的<code>KDE(Plasma)</code></p><p><img alt="image-20201012022505849" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/image-20201012022505849.png"></p><h4 id="2-4-6-安装桌面管理器"><a href="#2-4-6-安装桌面管理器" class="headerlink" title="2.4.6 安装桌面管理器"></a>2.4.6 安装桌面管理器</h4><p>安装好了桌面环境包以后，我们需要安装一个图形化的桌面管理器来帮助我们登录并且选择我们使用的桌面环境，这里我选择使用<code>sddm</code></p><p>安装sddm:</p><p>pacman -S sddm</p><p><img alt="image-20201012023711692" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/image-20201012023711692.png"></p><p>设置开机启动sddm服务; Arch下用于管理系统服务的命令systemctl</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl start   服务名 （启动一项服务）</span><br><span class="line">systemctl stop    服务名 （停止一项服务）</span><br><span class="line">systemctl enable  服务名 （开机启动一项服务）</span><br><span class="line">systemctl disable 服务名 （取消开机启动一项服务）</span><br></pre></td></tr></table></figure><p>systemctl enable sddm</p><h4 id="2-4-7-再次配置网络"><a href="#2-4-7-再次配置网络" class="headerlink" title="2.4.7 再次配置网络"></a>2.4.7 再次配置网络</h4><p>桌面环境使用的是<code>NetworkManager</code>这个网络服务,所以需要禁用自带的<code>netctl</code>并启用<code>NetworkManager</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl disable dhcpcd</span><br><span class="line">sudo systemctl enable NetworkManager</span><br></pre></td></tr></table></figure><p><img alt="image-20201012024838402" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/image-20201012024838402.png"></p><p>重启</p><p><img alt="image-20201012025145446" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/image-20201012025145446.png"></p><p><img alt="image-20201012025448860" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/image-20201012025448860.png"></p><h2 id="三、安装过程中的一些总结"><a href="#三、安装过程中的一些总结" class="headerlink" title="三、安装过程中的一些总结"></a>三、安装过程中的一些总结</h2><h3 id="3-1-usr路径"><a href="#3-1-usr路径" class="headerlink" title="3.1 /usr路径"></a>3.1 /usr路径</h3><p><code>/usr</code>路径: <code>/usr</code>路径也是我们比较常用的一个路径,这里的<code>usr</code>最早是<code>user</code>的缩写,但是目前我们认为它是<code>User System Resources</code>的缩写,因为其早期是作为<code>unix</code>系统中用户家目录存在的,相当于现在的<code>/home</code>目录,但如今这个路径的作用已经变更,其中通常是用户级的软件等,多是一些静态的,可多用户共享的文件。</p><h3 id="3-2-验证启动模式"><a href="#3-2-验证启动模式" class="headerlink" title="3.2 验证启动模式"></a>3.2 验证启动模式</h3><p>我们使用<code>/sys/firmware/efi/efivars</code>文件是否存在的方式来判断系统是否以<code>UEFI</code>模式启动,不同的启动模式,在后面的分区以及<code>grub</code>安装过程中会有不同.</p><p>我们常见的启动模式为<code>UEFI</code>和<code>Legacy</code>,他们都是<code>BIOS(Basic Input Output System,是个人电脑启动时加载的第一个软件)</code>,只是新和旧的两种不同的<code>BIOS</code>而已,当新的<code>BIOS</code>架构<code>UEFI</code>出现时,旧的<code>BIOS</code>便被称为<code>Legacy</code><br> 两个模式不止启动方式不同,对应的磁盘格式也不同:<code>UEFI</code>对应<code>GPT</code>格式,而<code>Legacy</code>对应<code>MBR</code>格式.混淆格式,系统将不能正常启动,我们在安装系统时,有时就需要使用分区工具转化磁盘格式为启动方式对应的格式。</p><h3 id="3-3-连接到因特网"><a href="#3-3-连接到因特网" class="headerlink" title="3.3 连接到因特网"></a>3.3 连接到因特网</h3><blockquote><p><strong>守护进程(<code>daemon</code>)</strong>:  在一个多任务的计算机操作系统中，<strong>守护进程</strong>是一种在后台执行的计算机程序。此类程序会被以进程的形式初始化。守护进程程序的名称通常以字母“d”结尾,在我们系统启动时,很多守护进程便一起启动,为我们做好开机前的配置.</p></blockquote><blockquote><p><strong>dhcpcd</strong>: 全称为<code>dhcp client daemon</code>,用来配置<code>dhcp</code>(动态主机设置协议)服务,我们常见的<code>dhcp</code>的作用是<strong>内部网或网络服务供应商自动分配IP地址给用户</strong>,这就省略了我们手动去配置网络信息(ip,子网掩码,网关等)的步骤,而该进程会在系统启动时帮我们启动<code>dhcp</code>服务,我们在使用过程中,也可手动的调用<code>dhcpcd</code>命令来连接有线网络</p></blockquote><h3 id="3-4-磁盘分区"><a href="#3-4-磁盘分区" class="headerlink" title="3.4 磁盘分区"></a>3.4 磁盘分区</h3><p><strong>磁盘分区</strong> : 磁盘分区的好处有很多,如:</p><ol><li>我们在使用一块磁盘时,不一定只使用一种文件系统,不同分区可以格式化为不同的文件系统;</li><li>分区有利于管理设备,系统一般单独放一个区，这样由于系统区只放系统，其他区不会受到系统盘出现磁盘碎片的性能影响;</li><li>如果一个分区出现逻辑损坏，仅损坏的分区而不是整个硬盘受影响.</li></ol><p><strong>交换分区(swap)</strong> :<code>swap</code>分区是类似于虚拟内存的一个手段,用来解决设备内存不够用的情况,它将磁盘的一部分空间用做存储空间,当系统的内存不够时,将内存中一部分暂时不用的进程数据存档到磁盘中,将内存腾出给正在运行的进程使用。<br> 在以前的系统分区方案中,交换空间是必须的两个分区之一(另一个是根分区,但假如我们如果使用<code>uefi</code>的启动方式,我们还需要一个<code>efi</code>分区),而现在我们可以根据自己的系统内存够不够用来决定是否添加交换分区。</p><p><strong>/dev目录</strong>: 该目录是<code>linux</code>的设备目录,包含了Linux系统中使用的所有外部设备,常见的有<br> <strong>/dev/hd*</strong> : IDE设备<br> <strong>/dev/sd*</strong> : SCSI设备<br> <strong>/dev/null</strong> : 空设备,它丢弃一切写入其中的数据（但报告写入操作成功）,我们通常会把不需要的数据写入其中以丢弃<br> <strong>/dev/tty*</strong> : 虚拟终端</p><h3 id="3-5-挂载"><a href="#3-5-挂载" class="headerlink" title="3.5 挂载"></a>3.5 挂载</h3><p>挂载分区是将刚才规划好的磁盘挂载到当前系统(启动盘中的安装程序)的<code>/mnt</code>目录中,借助当前系统中的各种工具来对磁盘做进一步的管理</p><ul><li><strong>挂载</strong> : 在<code>linux</code>上,要使用一个文件,必须对包含它的文件系统进行挂载的操作,在计算机启动时,系统已经自动的挂载了我们设定好的文件系统,但当我们接入新的文件设备,如插入一个U盘时,我们就得手动进行挂载操作(很多图形化界面都带有自动挂载的功能,不需要手动挂载)</li><li><strong>/mnt</strong> :  <code>mount</code>的简写,专门用来作为挂载点</li></ul><p><strong>引导程序</strong> : 在系统启动时,最先启动的是<code>BIOS</code>,它寻找到我们的可启动设备之后,就将控制权交给<strong>引导程序</strong>,引导程序帮我们<strong>查找并打开设备中的操作系统</strong>,<code>grub</code>是我们<code>linux</code>中最常用的引导程序；<br> 在最开始的时候,引导程序位于我们硬盘的主引导记录分区(<code>MBR</code>),随着后面引导程序的越来越复杂,<code>MBP</code>中已经存储不下,如今的系统将<code>MBR</code>中的引导程序作为第一段引导程序,该引导会去找到并启动第二段引导程序,也就是我们常见的<code>grub</code>等引导程序。</p>]]></content>
      
      
      <categories>
          
          <category> 实验笔记 </category>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Arch_Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day0</title>
      <link href="/2020-02-02/day0/"/>
      <url>/2020-02-02/day0/</url>
      
        <content type="html"><![CDATA[<h3 id="2020年2月2日"><a href="#2020年2月2日" class="headerlink" title="2020年2月2日"></a>2020年2月2日</h3><h3 id="Web学习：简单搭建一个网站"><a href="#Web学习：简单搭建一个网站" class="headerlink" title="Web学习：简单搭建一个网站"></a>Web学习：简单搭建一个网站</h3><a id="more"></a><h3 id="Web-第0天-–-Mumiao"><a href="#Web-第0天-–-Mumiao" class="headerlink" title="Web-第0天 – Mumiao"></a>Web-第0天 – Mumiao</h3><h3 id="目标：简单搭建一个网站"><a href="#目标：简单搭建一个网站" class="headerlink" title="目标：简单搭建一个网站"></a>目标：简单搭建一个网站</h3><ol><li>购买服务器</li><li>搭建宝塔</li><li>搭建Apache Mysql phpmyadmin PHP 环境</li><li>搭建DEDECMS程序</li><li>购买域名</li><li>解析域名</li><li>正式访问</li></ol><h4 id="1-购买服务器"><a href="#1-购买服务器" class="headerlink" title="1.购买服务器"></a>1.购买服务器</h4><p>已有阿里云服务器一台，</p><p>CPU： 1核</p><p>内存： 2 GiB</p><p>带宽： 1Mbps</p><p>重装系统为Windows Server 2016，本地系统win10，待服务器启动后， mstsc远程连接服务器。</p><h4 id="2-搭建宝塔"><a href="#2-搭建宝塔" class="headerlink" title="2. 搭建宝塔"></a>2. 搭建宝塔</h4><p><a href="https://www.bt.cn/" target="_blank" rel="noopener">官网</a>下载，安装宝塔面板；</p><p>把给定的链接IP改为本地地址127.0.0.1，端口和url其他部分不变复制到浏览器访问，输入给定的账号密码登录，弹出套件安装选择：</p><p><img alt="宝塔面板" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/bt.png"></p><p>选择Apache套件，开始自动安装Apache-2.4，MySQL-5.5，然后我们手动安装PHP-5.6，phpmyadmin 4.6.</p><p>添加站点，暂时没有域名，所以填入服务器公网IP，本地访问IP地址，站点创建成功，说明我的环境搭建成功。</p><h4 id="3-搭建Apache-Mysql-phpmyadmin-PHP-环境"><a href="#3-搭建Apache-Mysql-phpmyadmin-PHP-环境" class="headerlink" title="3.搭建Apache Mysql phpmyadmin PHP 环境"></a>3.搭建Apache Mysql phpmyadmin PHP 环境</h4><p>见2</p><h4 id="4-搭建DEDECMS程序"><a href="#4-搭建DEDECMS程序" class="headerlink" title="4.搭建DEDECMS程序"></a>4.搭建DEDECMS程序</h4><p>去<a href="http://www.dedecms.com/" target="_blank" rel="noopener">织梦官网</a>下载DedeCMS V5.7</p><p><img alt="织梦" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/zhimeng.png"></p><p>根据官方使用说明：</p><p>1.下载程序解压到本地目录;</p><p>2.上传程序目录中的/uploads到网站根目录；</p><p>3.运行<a href="http://www.yourname.com/install/index.php(yourname表示你的域名),按照安装提示说明进行程序安装。" target="_blank" rel="noopener">http://www.yourname.com/install/index.php(yourname表示你的域名),按照安装提示说明进行程序安装。</a></p><p>本地访问服务器IP，搭建成功。</p><p><img alt="dedecms" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/dedecms.png"></p><h4 id="5-购买域名"><a href="#5-购买域名" class="headerlink" title="5.购买域名"></a>5.购买域名</h4><p>之前在<a href="https://sg.godaddy.com/" target="_blank" rel="noopener">GoDaddy</a>购买过域名，所以这次还是在这个网站购买，</p><p>选定域名Mumiao.xyz，购买。</p><p><img alt="GoDaddy" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/GoDaddy.png"></p><h4 id="6-解析域名"><a href="#6-解析域名" class="headerlink" title="6.解析域名"></a>6.解析域名</h4><p>域名解析我使用了阿里云的DNS服务器，首先我在<a href="https://sg.godaddy.com/" target="_blank" rel="noopener">GoDaddy</a>的域名管理后台修改DNS服务器为自定义：</p><p>ns1.alidns.com</p><p>ns2.alidns.com</p><p>然后在阿里云添加域名解析，添加两条记录：</p><p><img alt="DNS" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/DNS.png"></p><p>等待生效。</p><h4 id="7-正式访问"><a href="#7-正式访问" class="headerlink" title="7.正式访问"></a>7.正式访问</h4><p>最终失败了，在解析生效后兴冲冲的在宝塔管理页面把域名由IP更改为Mumiao.xyz，然而……</p><p><img alt="备案" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/BA.png"></p><p>需要备案，看了一下备案的流程比较繁琐（需要邮寄）而且时间很长，遂放弃，教训是以后搭建不要使用国内的服务器，不过整个搭建的流程还是了解了，今天已到凌晨，先就这样了，考虑明天重新买一台无需备案的服务器重新搭建一遍，睡觉去了(￣o￣) . z Z</p><hr><hr><p>醒了，得知国内服务器修改默认端口（80）就不用备案了，所以我去宝塔面板把端口改为了88，访问不成功，咋回事(っ °Д °)     难道需要时间刷新？</p><p>发呆了两分钟突然想到我服务器安全组只开了几个常用端口，马上在安全组规则添加88端口，成功访问&nbsp;  \^o^/</p><p><img alt="安全组" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/aqz.png"></p><p><img alt="dede" data-src="https://markdownoss1.oss-cn-beijing.aliyuncs.com/img/dede.png"></p>]]></content>
      
      
      <categories>
          
          <category> 实验笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Why</title>
      <link href="/2019-11-22/why/"/>
      <url>/2019-11-22/why/</url>
      
        <content type="html"><![CDATA[<h3 id="第一篇，这个博客的用处。"><a href="#第一篇，这个博客的用处。" class="headerlink" title="第一篇，这个博客的用处。"></a>第一篇，这个博客的用处。</h3><blockquote><p>94%的人认为自己分享信息会对他人有用，却只有32%的人愿意主动分享。大部分的我们，都是消极的信息消费者。 &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp; &nbsp;&nbsp;&nbsp; &nbsp;  &nbsp;  &nbsp;  ——《纽约时报》社会分享行为调查</p></blockquote><a id="more"></a><p>我有随便写写的习惯，当然不能称之为文章，更多的是生活的琐事，一点小牢骚。通常我写在腾讯微博上，一个已经死掉的产品，用来随便写写再好不过了，没什么人用，更没人看，你几乎可以把它当作日记本来用。当然我没有写日记的习惯，我只是什么时候想写了就写一两句，大多数是情绪不好的时候——高兴的时候是不会想到的，用文字来发泄郁闷的心情。  <br> </p><p>不过腾讯微博已经好几年没人维护了，我感觉说不定哪天就没了，曾想过建一个个人的小站，但是买了主机域名之后又懒的搞了。今天无聊输了自己的域名访问了一下竟然是一个色情网站，可能是被劫持了吧，把域名解析都删掉懒得再折腾了。 <br></p><p>现在我选择在Github上搭建个人博客，也能学习一下Github的使用方法。 <br>  <br> </p><p>除了一些生活琐事，也发一些自己学习过程的记录，当然更想写一些有技术有价值的文章 ，希望自己能快快成长，多多沉淀，尽力去分享、去输出。不再只是单纯的<strong><em>信息消费者</em></strong>。 <br> </p><p>总的来说这大概就是这个博客的用处了，写不了什么有深度的文章，一些胡言乱语和小牢骚。 </p>]]></content>
      
      
      <categories>
          
          <category> 胡言醉语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Why </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LOVESICK</title>
      <link href="/2015-06-13/lovesick/"/>
      <url>/2015-06-13/lovesick/</url>
      
        <content type="html"><![CDATA[<h3 id="2015年6月13日"><a href="#2015年6月13日" class="headerlink" title="2015年6月13日"></a>2015年6月13日</h3><h3 id="上邪"><a href="#上邪" class="headerlink" title="上邪"></a>上邪</h3><a id="more"></a><p>上邪  </p><p>我欲与子相逢，</p><p>汲汲徒相思。</p><p>心情愿，凌迟腰斩。</p><p>万古含冤心被掊，</p><p>换上世百回眸。</p>]]></content>
      
      
      <categories>
          
          <category> 胡言醉语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> versemonger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Encounter</title>
      <link href="/2014-12-21/encounter/"/>
      <url>/2014-12-21/encounter/</url>
      
        <content type="html"><![CDATA[<h3 id="2014年12月21日"><a href="#2014年12月21日" class="headerlink" title="2014年12月21日"></a>2014年12月21日</h3><h3 id="苏幕遮-邂逅"><a href="#苏幕遮-邂逅" class="headerlink" title="苏幕遮 邂逅"></a>苏幕遮 邂逅</h3><a id="more"></a><h4 id="苏幕遮-邂逅-1"><a href="#苏幕遮-邂逅-1" class="headerlink" title="苏幕遮 邂逅"></a>苏幕遮 邂逅</h4><p>风彻骨，寒坼地。独上凭栏，栏上凭眺敝。白阳不暖照秃枝。<br>枯草无情，萋萋勾吾思。</p><p>下凭栏，心如锥。纤纤玉手，忽拍思人臂。朝暮鬓影如春来。<br> 一扫愁肠，澎湃难入睡。</p>]]></content>
      
      
      <categories>
          
          <category> 胡言醉语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> versemonger </tag>
            
            <tag> 寒 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A dream</title>
      <link href="/2014-12-19/a-dream/"/>
      <url>/2014-12-19/a-dream/</url>
      
        <content type="html"><![CDATA[<h3 id="2014年12月19日"><a href="#2014年12月19日" class="headerlink" title="2014年12月19日"></a>2014年12月19日</h3><h3 id="腊月十九日夜记梦"><a href="#腊月十九日夜记梦" class="headerlink" title="腊月十九日夜记梦"></a>腊月十九日夜记梦</h3><a id="more"></a><h4 id="江城子"><a href="#江城子" class="headerlink" title="江城子"></a>江城子</h4><h4 id="腊月十九日夜记梦-1"><a href="#腊月十九日夜记梦-1" class="headerlink" title="腊月十九日夜记梦"></a>腊月十九日夜记梦</h4><p>十五月前初相逢，心一怔。叹倾城。相知意生，奈拙只自憎。<br>纵使伶俐恐不应，貌不扬，功未成。</p><p>夜来幽梦又相逢，梦圆梦。诉心疼。执手相谈，誓从心底生。<br>梦醒心中更凄冷，珠有泪，月朦朦。</p>]]></content>
      
      
      <categories>
          
          <category> 胡言醉语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 梦 </tag>
            
            <tag> versemonger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/1019-09-22/hello-world/"/>
      <url>/1019-09-22/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><h2 id="Hexo指令（hexo官方文档）"><a href="#Hexo指令（hexo官方文档）" class="headerlink" title="Hexo指令（hexo官方文档）"></a>Hexo指令（<a href="https://hexo.bootcss.com/docs/commands.html" target="_blank" rel="noopener">hexo官方文档</a>）</h2><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init [folder]</span><br></pre></td></tr></table></figure><p>新建一个网站。如果没有设置 <code>folder</code> ，Hexo 默认在目前的文件夹建立网站。</p><h3 id="new"><a href="#new" class="headerlink" title="new"></a>new</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <a href="https://hexo.bootcss.com/docs/configuration.html" target="_blank" rel="noopener">_config.yml</a> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"post title with whitespace"</span></span><br></pre></td></tr></table></figure><p>默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 <code>index.md</code> 文件。你可以使用 <code>--path</code> 参数来覆盖上述行为、自行决定文件的目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page --path about/me <span class="string">"About me"</span></span><br></pre></td></tr></table></figure><p>以上命令会创建一个 <code>source/about/me.md</code> 文件，同时 Front Matter 中的 title 为 <code>&quot;About me&quot;</code></p><h3 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>生成静态文件，该命令可以简写为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure><h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>启动服务器，该命令可以简写为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p>默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p><h3 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>该命令可以简写为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><h3 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
